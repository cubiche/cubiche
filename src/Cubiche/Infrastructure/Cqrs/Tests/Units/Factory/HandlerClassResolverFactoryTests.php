<?php

/**
 * This file is part of the Cubiche/Cqrs component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Infrastructure\Cqrs\Tests\Units\Factory;

use Cubiche\Core\Bus\Exception\NotFoundException;
use Cubiche\Core\Bus\Middlewares\Handler\Locator\InMemoryLocator;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerClass\HandlerClassResolver;
use Cubiche\Core\Cqrs\Tests\Fixtures\Command\LoginUserCommand;
use Cubiche\Core\Delegate\Delegate;
use Cubiche\Infrastructure\Cqrs\Factory\HandlerClassResolverFactory;
use Cubiche\Infrastructure\Cqrs\Tests\Fixtures\Command\CreateUserCommand;
use Cubiche\Infrastructure\Cqrs\Tests\Fixtures\Query\FindOneUserByIdQuery;
use Cubiche\Infrastructure\Cqrs\Tests\Fixtures\UserCommandHandler;
use Cubiche\Infrastructure\Cqrs\Tests\Fixtures\UserQueryHandler;
use Cubiche\Infrastructure\Cqrs\Tests\Fixtures\UserValidatorHandler;
use Cubiche\Infrastructure\Cqrs\Tests\Units\TestCase;

/**
 * HandlerClassResolverFactoryTests class.
 *
 * Generated by TestGenerator on 2017-05-03 at 11:41:18.
 */
class HandlerClassResolverFactoryTests extends TestCase
{
    /**
     * {@inheritdoc}
     */
    protected function createFactory()
    {
        return new HandlerClassResolverFactory();
    }

    /**
     * Test create method.
     */
    public function testCreate()
    {
        $this
            ->given($factory = $this->createFactory())
            ->then()
                ->object($factory->createForCommand(new InMemoryLocator([])))
                    ->isInstanceOf(HandlerClassResolver::class)
                ->object($factory->createForCommandValidator(new InMemoryLocator([])))
                    ->isInstanceOf(HandlerClassResolver::class)
                ->object($factory->createForQuery(new InMemoryLocator([])))
                    ->isInstanceOf(HandlerClassResolver::class)
                ->object($factory->createForQueryValidator(new InMemoryLocator([])))
                    ->isInstanceOf(HandlerClassResolver::class)
        ;
    }

    /**
     * Test resolve command method.
     */
    public function testResolveCommand()
    {
        $this
            ->given($resolver = $this->createFactory()->createForCommand(new InMemoryLocator([])))
            ->and($resolver->addHandler(CreateUserCommand::class, new UserCommandHandler()))
            ->when($result = $resolver->resolve(new CreateUserCommand('ivan', 'pass', 'ivan@cubiche.com')))
            ->then()
                ->object($result)
                    ->isInstanceOf(Delegate::class)
        ;

        $this
            ->given($resolver = $this->createFactory()->createForCommand(new InMemoryLocator([])))
            ->and($resolver->addHandler(CreateUserCommand::class, new UserCommandHandler()))
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LoginUserCommand('ivan@cubiche.com', 'pass'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }

    /**
     * Test resolve command method.
     */
    public function testResolveCommandValidator()
    {
        $this
            ->given($resolver = $this->createFactory()->createForCommandValidator(new InMemoryLocator([])))
            ->and($validator = new UserValidatorHandler())
            ->and($resolver->addHandler(CreateUserCommand::class, $validator))
            ->when($result = $resolver->resolve(new CreateUserCommand('ivan', 'pass', 'ivan@cubiche.com')))
            ->then()
                ->object($result)
                    ->isInstanceOf(Delegate::class)
        ;

        $this
            ->given($resolver = $this->createFactory()->createForCommandValidator(new InMemoryLocator([])))
            ->and($resolver->addHandler(CreateUserCommand::class, new UserValidatorHandler()))
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LoginUserCommand('ivan@cubiche.com', 'pass'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }

    /**
     * Test resolve query method.
     */
    public function testResolveQuery()
    {
        $this
            ->given($resolver = $this->createFactory()->createForQuery(new InMemoryLocator([])))
            ->and($resolver->addHandler(FindOneUserByIdQuery::class, new UserQueryHandler()))
            ->when($result = $resolver->resolve(new FindOneUserByIdQuery('3dbb0644-70c7-42b2-bb55-21bba4f6e221')))
            ->then()
                ->object($result)
                    ->isInstanceOf(Delegate::class)
        ;

        $this
            ->given($resolver = $this->createFactory()->createForQuery(new InMemoryLocator([])))
            ->and($resolver->addHandler(FindOneUserByIdQuery::class, new UserQueryHandler()))
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LoginUserCommand('ivan@cubiche.com', 'pass'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }

    /**
     * Test resolve query method.
     */
    public function testResolveQueryCommand()
    {
        $this
            ->given($resolver = $this->createFactory()->createForQueryValidator(new InMemoryLocator([])))
            ->and($validator = new UserValidatorHandler())
            ->and($resolver->addHandler(FindOneUserByIdQuery::class, $validator))
            ->when($result = $resolver->resolve(new FindOneUserByIdQuery('3dbb0644-70c7-42b2-bb55-21bba4f6e221')))
            ->then()
                ->object($result)
                    ->isInstanceOf(Delegate::class)
        ;

        $this
            ->given($resolver = $this->createFactory()->createForQueryValidator(new InMemoryLocator([])))
            ->and($resolver->addHandler(FindOneUserByIdQuery::class, new UserValidatorHandler()))
            ->then()
            ->exception(function () use ($resolver) {
                $resolver->resolve(new LoginUserCommand('ivan@cubiche.com', 'pass'));
            })
            ->isInstanceOf(NotFoundException::class)
        ;
    }
}
