<?php

/**
 * This file is part of the Cubiche/Bus component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Infrastructure\Bus\Tests\Units\Handler\Locator;

use Cubiche\Core\Bus\Exception\NotFoundException;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LoginUserMessage;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LoginUserMessageListener;
use Cubiche\Core\Bus\Tests\Units\Handler\Locator\HandlerLocatorTestCase;
use Cubiche\Infrastructure\Bus\Handler\Locator\ServiceContainerLocator;
use DI\ContainerBuilder;

/**
 * ServiceContainerLocatorTests class.
 *
 * Generated by TestGenerator on 2017-05-03 at 10:00:57.
 */
class ServiceContainerLocatorTests extends HandlerLocatorTestCase
{
    /**
     * {@inheritdoc}
     */
    protected function createHandlerLocator()
    {
        $builder = new ContainerBuilder();

        return new ServiceContainerLocator($builder->build());
    }

    /**
     * Test addHandler.
     */
    public function testAddHandler()
    {
        parent::testAddHandler();

        $this
            ->given($locator = $this->createHandlerLocator())
            ->and($handler = new LoginUserMessageListener())
            ->then()
                ->exception(function () use ($locator, $handler) {
                    $locator->addHandler(LoginUserMessage::class, $handler);
                })
                ->isInstanceOf(\InvalidArgumentException::class)
        ;
    }

    /**
     * Test Locate method.
     */
    public function testLocate()
    {
        $this
            ->given($locator = $this->createHandlerLocator())
            ->then()
                ->exception(function () use ($locator) {
                    $locator->locate(LoginUserMessage::class);
                })
                ->isInstanceOf(NotFoundException::class)
        ;

        $this
            ->given($builder = new ContainerBuilder())
            ->and(
                $builder->addDefinitions([
                    'app.login.handler' => function () {
                        return new LoginUserMessageListener();
                    },
                ])
            )
            ->and($locator = new ServiceContainerLocator($builder->build()))
            ->when($locator->addHandler(LoginUserMessage::class, 'app.login.handler'))
            ->then()
                ->object($locator->locate(LoginUserMessage::class))
                    ->isInstanceOf(LoginUserMessageListener::class)
                ->and()
                ->exception(function () use ($locator) {
                    $locator->locate('Foo');
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }
}
