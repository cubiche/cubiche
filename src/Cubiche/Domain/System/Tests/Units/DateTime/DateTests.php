<?php

/**
 * This file is part of the Cubiche/System component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\System\Tests\Units\DateTime;

use Cubiche\Domain\System\DateTime\Date;
use Cubiche\Domain\System\DateTime\Exception\InvalidArgumentException;
use Cubiche\Domain\System\DateTime\Month;
use Cubiche\Domain\System\DateTime\MonthDay;
use Cubiche\Domain\System\DateTime\Year;
use Cubiche\Domain\System\Tests\Units\TestCase;

/**
 * DateTests class.
 *
 * Generated by TestGenerator on 2018-01-15 at 13:37:53.
 */
class DateTests extends TestCase
{
    /**
     * Test FromNative method.
     */
    public function testFromNative()
    {
        $this
            ->given($dateTime = \DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20'))
            ->and($fromNativeDate = Date::fromNative($dateTime))
            ->and($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
                ->then()
                ->object($date)
                    ->isEqualTo($fromNativeDate)
                ->and()
                ->exception(function () {
                    new Date(new Year(2015), Month::FEBRUARY(), new MonthDay(31));
                })->isInstanceOf(InvalidArgumentException::class)
        ;
    }

    /**
     * Test Now method.
     */
    public function testNow()
    {
        $this
            ->given($now = Date::now())
            ->and($year = $now->year()->toNative())
            ->and($month = $now->month()->toNative())
            ->and($day = $now->day()->toNative())
            ->then()
                ->object($now)
                    ->isInstanceOf(Date::class)
                ->integer($now->year()->toNative())
                    ->isEqualTo($year)
                ->string($now->month()->toNative())
                    ->isEqualTo($month)
                ->integer($now->day()->toNative())
                    ->isEqualTo($day)
        ;
    }

    /**
     * Test Year method.
     */
    public function testYear()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($year = new Year(2015))
            ->then()
                ->object($date->year())
                    ->isEqualTo($year)
        ;
    }

    /**
     * Test Month method.
     */
    public function testMonth()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($month = Month::APRIL())
            ->then()
                ->object($date->month())
                    ->isEqualTo($month)
        ;
    }

    /**
     * Test Day method.
     */
    public function testDay()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($day = new MonthDay(13))
            ->then()
                ->object($date->day())
                   ->isEqualTo($day)
        ;
    }

    /**
     * Test ToNative method.
     */
    public function testToNative()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($dateTime = \DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 00:00:00'))
            ->then()
                ->object($date->toNative())
                    ->isEqualTo($dateTime)
        ;
    }

    /**
     * Test Equals method.
     */
    public function testEquals()
    {
        $this
            ->given($date = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')))
            ->when($now = Date::now())
            ->then()
                ->boolean($date->equals($now))
                    ->isFalse()
                ->boolean($date->equals($date))
                    ->isTrue()
        ;
    }

    /**
     * Test __toString method.
     */
    public function testToString()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->then()
                ->string($date->__toString())
                    ->isEqualTo('2015-04-13')
        ;
    }

    /**
     * Test HashCode method.
     */
    public function testHashCode()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->then()
                ->string($date->hashCode())
                    ->isEqualTo('2015-04-13')
        ;
    }
}
