<?php

/**
 * This file is part of the Cubiche/System component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\System\Tests\Units\DateTime;

use Cubiche\Domain\System\DateTime\Date;
use Cubiche\Domain\System\DateTime\DateRange;
use Cubiche\Domain\System\DateTime\Exception\InvalidArgumentException;
use Cubiche\Domain\System\DateTime\Month;
use Cubiche\Domain\System\DateTime\MonthDay;
use Cubiche\Domain\System\DateTime\Year;
use Cubiche\Domain\System\Tests\Units\TestCase;

/**
 * DateRangeTests class.
 *
 * Generated by TestGenerator on 2018-01-15 at 13:37:53.
 */
class DateRangeTests extends TestCase
{
    /**
     * Test From method.
     */
    public function testFrom()
    {
        $this
            ->given($dateRange = new DateRange(new Date(new Year(2015), Month::APRIL(), new MonthDay(13))))
            ->when($from = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')))
            ->then()
                ->object($dateRange->from())
                    ->isEqualTo($from)
            ->and()
            ->when($dateRange = new DateRange())
            ->then()
                ->variable($dateRange->from())
                    ->isNull()
        ;
    }

    /**
     * Test To method.
     */
    public function testTo()
    {
        $this
            ->given($dateRange = new DateRange(null, new Date(new Year(2017), Month::DECEMBER(), new MonthDay(24))))
            ->when($to = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2017-12-24 15:05:20')))
            ->then()
                ->object($dateRange->to())
                    ->isEqualTo($to)
                ->and()
                ->when($dateRange = new DateRange())
                ->then()
                    ->variable($dateRange->to())
                        ->isNull()
        ;
    }

    /**
     * Test Contains method.
     */
    public function testContains()
    {
        $this
            ->given($from = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')))
            ->when($to = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2017-12-24 15:05:20')))
            ->and($outdate = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-12 15:05:20')))
            ->and($dateRange = new DateRange($from, $to))
            ->then()
                ->object($dateRange->from())
                    ->isEqualTo($from)
                ->object($dateRange->to())
                    ->isEqualTo($to)
                ->boolean($dateRange->contains($from))
                    ->isTrue()
                ->boolean($dateRange->contains($outdate))
                    ->isFalse()
            ->and()
            ->exception(function () use ($from, $to) {
                new DateRange($to, $from);
            })->isInstanceOf(InvalidArgumentException::class)
        ;
    }

    /**
     * Test Equals method.
     */
    public function testEquals()
    {
        $this
            ->given($from = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')))
            ->when($to = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2017-12-24 15:05:20')))
            ->and($dateRange = new DateRange($from, $to))
            ->and($dateRangeFrom = new DateRange($from))
            ->and(
                $dateRangeFromDistinct = new DateRange(
                    Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2014-07-14 15:05:20'))
                )
            )
            ->and($dateRangeTo = new DateRange(null, $to))
            ->and(
                $dateRangeToDistinct = new DateRange(
                    null,
                    Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2014-07-14 15:05:20'))
                )
            )
            ->and(
                $dateRangeDistinct = new DateRange(
                    Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2014-07-14 15:05:20')),
                    $to
                )
            )
            ->and($dateRangeEqual = new DateRange($from, $to))
                ->then()
                    ->boolean($dateRange->equals($dateRangeFrom))
                        ->isFalse()
                    ->boolean($dateRange->equals($dateRangeTo))
                        ->isFalse()
                    ->boolean($dateRangeFrom->equals($dateRangeTo))
                        ->isFalse()
                    ->boolean($dateRangeFrom->equals($dateRangeFromDistinct))
                        ->isFalse()
                    ->boolean($dateRangeTo->equals($dateRangeToDistinct))
                        ->isFalse()
                    ->boolean($dateRange->equals($dateRangeDistinct))
                        ->isFalse()
                    ->boolean($dateRange->equals($dateRangeEqual))
                        ->isTrue()
        ;
    }

    /**
     * Test __toString method.
     */
    public function testToString()
    {
        $this
            ->given($from = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')))
            ->when($to = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2017-12-24 15:05:20')))
            ->and($outdate = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-12 15:05:20')))
            ->and($dateRange = new DateRange($from, $to))
            ->and($dateRangeFrom = new DateRange($from))
            ->and($dateRangeTo = new DateRange(null, $to))
            ->then()
                ->string($dateRange->__toString())
                    ->isEqualTo('2015-04-13 - 2017-12-24')
                ->string($dateRangeFrom->__toString())
                    ->isEqualTo('2015-04-13 - [inf')
                ->string($dateRangeTo->__toString())
                    ->isEqualTo('inf] - 2017-12-24')
        ;
    }

    /**
     * Test HashCode method.
     */
    public function testHashCode()
    {
        $this
            ->given($from = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')))
            ->when($to = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2017-12-24 15:05:20')))
            ->and($outdate = Date::fromNative(\DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-12 15:05:20')))
            ->and($dateRange = new DateRange($from, $to))
            ->and($dateRangeFrom = new DateRange($from))
            ->and($dateRangeTo = new DateRange(null, $to))
            ->then()
                ->string($dateRange->hashCode())
                    ->isEqualTo('2015-04-13 - 2017-12-24')
                ->string($dateRangeFrom->hashCode())
                    ->isEqualTo('2015-04-13 - [inf')
                ->string($dateRangeTo->hashCode())
                    ->isEqualTo('inf] - 2017-12-24')
        ;
    }
}
