<?php

/**
 * This file is part of the Cubiche/System component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\System\Tests\Units\DateTime;

use Cubiche\Core\Validator\Exception\InvalidArgumentException;
use Cubiche\Domain\System\DateTime\Timezone;
use Cubiche\Domain\System\StringLiteral;
use Cubiche\Domain\System\Tests\Units\TestCase;

/**
 * TimezoneTests class.
 *
 * Generated by TestGenerator on 2018-01-15 at 13:37:53.
 */
class TimezoneTests extends TestCase
{
    /**
     * Test FromNative method.
     */
    public function testFromNative()
    {
        $this
            ->given($nativeTimezone = new \DateTimeZone('Europe/Madrid'))
            ->and($timezoneFromNative = Timezone::fromNative($nativeTimezone))
            ->and($timezone = new Timezone(new StringLiteral('Europe/Madrid')))
            ->then()
                ->object($timezone)
                    ->isEqualTo($timezoneFromNative)
                ->and()
                ->exception(function () {
                    new Timezone(StringLiteral::fromNative('Europe/Cuba'));
                })->isInstanceOf(InvalidArgumentException::class)
        ;
    }

    /**
     * Test FromName method.
     */
    public function testFromName()
    {
        $this
            ->given($timezoneFromName = Timezone::fromName('Europe/Amsterdam'))
            ->and($timezone = new Timezone(new StringLiteral('Europe/Amsterdam')))
            ->then()
                ->object($timezone)
                    ->isEqualTo($timezoneFromName)
        ;
    }

    /**
     * Test FromDefault method.
     */
    public function testFromDefault()
    {
        $this
            ->given($timezoneFromName = Timezone::fromDefault())
            ->and($timezone = new Timezone(new StringLiteral(date_default_timezone_get())))
            ->then()
                ->object($timezone)
                    ->isEqualTo($timezoneFromName)
        ;
    }

    /**
     * Test ToNative method.
     */
    public function testToNative()
    {
        $this
            ->given($nativeTimezone = new \DateTimeZone('America/Havana'))
            ->and($timezone = new Timezone(new StringLiteral('America/Havana')))
            ->then()
                ->string($timezone->toNative()->getName())
                   ->isEqualTo($nativeTimezone->getName())
                ->and()
                ->when($timezone = new Timezone(new StringLiteral('14:30')))
                ->then()
                    ->string($timezone->toNative()->getName())
                        ->isNotEqualTo($nativeTimezone->getName())
        ;
    }

    /**
     * Test OffsetToName method.
     */
    public function testOffsetToName()
    {
        $this
            ->given($timezone = Timezone::offsetToName('02:00'))
            ->then()
                ->string($timezone->toNative())
                    ->isEqualTo('Europe/Paris')
        ;

        $this
            ->given($timezone = Timezone::offsetToName('14:30'))
            ->then()
                ->string($timezone->toNative())
                    ->isEqualTo('UTC')
        ;
    }

    /**
     * Test Name method.
     */
    public function testName()
    {
        $this
            ->given($timezone = new Timezone(new StringLiteral('Europe/Madrid')))
            ->then()
                ->string($timezone->name()->toNative())
                    ->isEqualTo('Europe/Madrid')
        ;
    }

    /**
     * Test Equals method.
     */
    public function testEquals()
    {
        $this
            ->given($timezone1 = new Timezone(new StringLiteral('Europe/Madrid')))
            ->and($timezone2 = new Timezone(new StringLiteral('Europe/Madrid')))
            ->and($timezone3 = new Timezone(new StringLiteral('Europe/Berlin')))
            ->then()
                ->boolean($timezone1->equals($timezone2))
                    ->isTrue()
                ->boolean($timezone2->equals($timezone1))
                    ->isTrue()
                ->boolean($timezone1->equals($timezone3))
                    ->isFalse()
                ->boolean($timezone2->equals($timezone3))
                    ->isFalse()
        ;
    }

    /**
     * Test __toString method.
     */
    public function testToString()
    {
        $this
            ->given($timezone = new Timezone(new StringLiteral('Europe/Madrid')))
            ->then()
                ->string($timezone->__toString())
                    ->isEqualTo('Europe/Madrid')
        ;
    }

    /**
     * Test HashCode method.
     */
    public function testHashCode()
    {
        $this
            ->given($timezone = new Timezone(new StringLiteral('Europe/Madrid')))
            ->then()
                ->string($timezone->hashCode())
                    ->isEqualTo('Europe/Madrid')
        ;
    }
}
