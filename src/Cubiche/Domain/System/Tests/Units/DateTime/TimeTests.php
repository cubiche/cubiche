<?php

/**
 * This file is part of the Cubiche/System component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\System\Tests\Units\DateTime;

use Cubiche\Domain\System\DateTime\Hour;
use Cubiche\Domain\System\DateTime\Minute;
use Cubiche\Domain\System\DateTime\Second;
use Cubiche\Domain\System\DateTime\Time;
use Cubiche\Domain\System\Tests\Units\TestCase;

/**
 * TimeTests class.
 *
 * Generated by TestGenerator on 2018-01-15 at 13:37:53.
 */
class TimeTests extends TestCase
{
    /**
     * Test FromNative method.
     */
    public function testFromNative()
    {
        $this
            ->given($dateTime = \DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20'))
            ->and($timeFromNative = Time::fromNative($dateTime))
            ->and($time = new Time(new Hour(15), new Minute(05), new Second(20)))
            ->then()
                ->object($time)
                    ->isEqualTo($timeFromNative)
                ->object($time->hour())
                    ->isEqualTo(new Hour(15))
                ->object($time->minute())
                    ->isEqualTo(new Minute(05))
                ->object($time->second())
                    ->isEqualTo(new Second(20))
        ;
    }

    /**
     * Test Now method.
     */
    public function testNow()
    {
        $this
            ->given($now = Time::now())
            ->and($hour = $now->hour()->toNative())
            ->and($minute = $now->minute()->toNative())
            ->and($second = $now->second()->toNative())
            ->then()
                ->object($now)
                    ->isInstanceOf(Time::class)
                ->integer($now->hour()->toNative())
                    ->isEqualTo($hour)
                ->integer($now->minute()->toNative())
                    ->isEqualTo($minute)
                ->integer($now->second()->toNative())
                    ->isEqualTo($second)
        ;
    }

    /**
     * Test Zero method.
     */
    public function testZero()
    {
        $this
            ->given($time = new Time(new Hour(0), new Minute(0), new Second(0)))
            ->then()
                ->object($time)
                    ->isEqualTo(Time::zero())
        ;
    }

    /**
     * Test ToNative method.
     */
    public function testToNative()
    {
        $this
            ->given($time = new Time(new Hour(15), new Minute(05), new Second(20)))
            ->and($dateTime = \DateTime::createFromFormat('H:i:s', '15:05:20'))
            ->then()
                ->object($time->toNative())
                    ->isEqualTo($dateTime)
        ;
    }

    /**
     * Test Equals method.
     */
    public function testEquals()
    {
        $this
            ->given($dateTime = \DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20'))
            ->and($time = Time::fromNative($dateTime))
            ->and($time1 = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($time2 = new Time(new Hour(16), new Minute(5), new Second(20)))
            ->and($time3 = new Time(new Hour(15), new Minute(4), new Second(20)))
            ->and($time4 = new Time(new Hour(15), new Minute(5), new Second(21)))
            ->then()
                ->boolean($time->equals($time1))
                    ->isTrue()
                ->boolean($time->equals($time2))
                    ->isFalse()
                ->boolean($time->equals($time3))
                    ->isFalse()
                ->boolean($time->equals($time4))
                    ->isFalse()
        ;
    }

    /**
     * Test __toString method.
     */
    public function testToString()
    {
        $this
            ->given($time = new Time(new Hour(15), new Minute(05), new Second(20)))
            ->then()
                ->string($time->__toString())
                    ->isEqualTo('15:05:20')
        ;
    }

    /**
     * Test HashCode method.
     */
    public function testHashCode()
    {
        $this
            ->given($time = new Time(new Hour(15), new Minute(05), new Second(20)))
            ->then()
                ->string($time->hashCode())
                    ->isEqualTo('15:05:20')
        ;
    }
}
