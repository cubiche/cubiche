<?php

/**
 * This file is part of the Cubiche/System component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\System\Tests\Units\DateTime;

use Cubiche\Domain\System\DateTime\Date;
use Cubiche\Domain\System\DateTime\DateTime;
use Cubiche\Domain\System\DateTime\Hour;
use Cubiche\Domain\System\DateTime\Minute;
use Cubiche\Domain\System\DateTime\Month;
use Cubiche\Domain\System\DateTime\MonthDay;
use Cubiche\Domain\System\DateTime\Second;
use Cubiche\Domain\System\DateTime\Time;
use Cubiche\Domain\System\DateTime\Timezone;
use Cubiche\Domain\System\DateTime\Year;
use Cubiche\Domain\System\StringLiteral;
use Cubiche\Domain\System\Tests\Units\TestCase;

/**
 * DateTimeTests class.
 *
 * Generated by TestGenerator on 2018-01-15 at 13:37:53.
 */
class DateTimeTests extends TestCase
{
    /**
     * Test FromNative method.
     */
    public function testFromNative()
    {
        $this
            ->given(
                $fromNativeDateTime = DateTime::fromNative(
                    \DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')
                )
            )
            ->and($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($dateTime = new DateTime($date, $time))
            ->then()
                ->object($dateTime)
                    ->isEqualTo($fromNativeDateTime)
        ;
    }

    /**
     * Test FromTimestamp method.
     */
    public function testFromTimestamp()
    {
        $this
            ->given($dateTime = DateTime::fromTimestamp(1428930320))
            ->then()
                ->object($dateTime)
                    ->isInstanceOf(DateTime::class)
        ;
    }

    /**
     * Test Now method.
     */
    public function testNow()
    {
        $this
            ->given($now = DateTime::now())
            ->and($year = $now->year()->toNative())
            ->and($month = $now->month()->toNative())
            ->and($day = $now->day()->toNative())
            ->and($hour = $now->hour()->toNative())
            ->and($minute = $now->minute()->toNative())
            ->and($second = $now->second()->toNative())
            ->then()
                ->object($now)
                    ->isInstanceOf(DateTime::class)
                ->integer($now->year()->toNative())
                    ->isEqualTo($year)
                ->string($now->month()->toNative())
                    ->isEqualTo($month)
                ->integer($now->day()->toNative())
                    ->isEqualTo($day)
                ->integer($now->hour()->toNative())
                    ->isEqualTo($hour)
                ->integer($now->minute()->toNative())
                    ->isEqualTo($minute)
                ->integer($now->second()->toNative())
                    ->isEqualTo($second)
        ;
    }

    /**
     * Test Timezone method.
     */
    public function testTimezone()
    {
        $this
            ->given(
                $fromNativeDateTime = DateTime::fromNative(
                    \DateTime::createFromFormat(
                        'Y-m-d H:i:s',
                        '2015-04-13 15:05:20',
                        new \DateTimeZone('Europe/Madrid')
                    )
                )
            )
            ->and($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($timezone = new Timezone(new StringLiteral('Europe/Madrid')))
            ->and($dateTime = new DateTime($date, $time, $timezone))
                ->then()
                    ->object($dateTime)
                        ->isEqualTo($fromNativeDateTime)
                    ->object($dateTime->timezone())
                        ->isEqualTo($timezone)
        ;
    }

    /**
     * Test Midnight method.
     */
    public function testMidnight()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($dateTime = new DateTime($date, $time))
            ->then()
                ->integer($dateTime->hour()->toNative())
                    ->isEqualTo(15)
                ->integer($dateTime->minute()->toNative())
                    ->isEqualTo(5)
                ->integer($dateTime->second()->toNative())
                    ->isEqualTo(20)
                ->and()
                ->when($dateTime = $dateTime->midnight())
                ->then()
                    ->integer($dateTime->hour()->toNative())
                        ->isEqualTo(0)
                    ->integer($dateTime->minute()->toNative())
                        ->isEqualTo(0)
                    ->integer($dateTime->second()->toNative())
                        ->isEqualTo(0)
        ;
    }

    /**
     * Test Timestamp method.
     */
    public function testTimestamp()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($dateTime = new DateTime($date, $time))
            ->then()
                ->integer($dateTime->timestamp())
                    ->isEqualTo(1428930320)
        ;
    }

    /**
     * Test ToNative method.
     */
    public function testToNative()
    {
        $this
            ->given(
                $nativeDateTime = \DateTime::createFromFormat('Y-m-d H:i:s', '2015-04-13 15:05:20')
            )
            ->and($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($dateTime = new DateTime($date, $time))
            ->then()
                ->object($dateTime->toNative())
                    ->isEqualTo($nativeDateTime)
        ;
    }

    /**
     * Test Equals method.
     */
    public function testEquals()
    {
        $this
            ->given($now = DateTime::now())
            ->and($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($timezone = new Timezone(new StringLiteral('Europe/Madrid')))
            ->and($dateTime = new DateTime($date, $time, $timezone))
            ->then()
                ->boolean($dateTime->equals($now))
                    ->isFalse()
                ->boolean($dateTime->equals($dateTime))
                    ->isTrue()
        ;
    }

    /**
     * Test __toString method.
     */
    public function testToString()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($timezone = new Timezone(new StringLiteral('Europe/Madrid')))
            ->and($dateTime = new DateTime($date, $time, $timezone))
            ->then()
                ->string($dateTime->__toString())
                    ->isEqualTo('2015-04-13 15:05:20 Europe/Madrid')
        ;
    }

    /**
     * Test HashCode method.
     */
    public function testHashCode()
    {
        $this
            ->given($date = new Date(new Year(2015), Month::APRIL(), new MonthDay(13)))
            ->and($time = new Time(new Hour(15), new Minute(5), new Second(20)))
            ->and($timezone = new Timezone(new StringLiteral('Europe/Amsterdam')))
            ->and($dateTime = new DateTime($date, $time, $timezone))
            ->then()
                ->string($dateTime->hashCode())
                    ->isEqualTo('2015-04-13 15:05:20 Europe/Amsterdam')
        ;
    }
}
