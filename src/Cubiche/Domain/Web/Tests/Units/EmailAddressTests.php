<?php

/**
 * This file is part of the Cubiche/Web component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\Web\Tests\Units;

use Cubiche\Domain\System\StringLiteral;
use Cubiche\Domain\System\Tests\Units\StringLiteralTests;
use Cubiche\Domain\Web\EmailAddress;

/**
 * EmailAddressTests class.
 *
 * Generated by TestGenerator on 2017-03-15 at 11:36:08.
 */
class EmailAddressTests extends StringLiteralTests
{
    /**
     * {@inheritdoc}
     */
    protected function randomNativeValue()
    {
        return $this->faker->email;
    }

    /**
     * {@inheritdoc}
     */
    protected function invalidNativeValue()
    {
        return 'wrongemail@address';
    }

    /**
     * {@inheritdoc}
     */
    protected function uniqueNativeValue()
    {
        return $this->faker->unique()->email;
    }

    /**
     * {@inheritdoc}
     */
    protected function fromNative($value)
    {
        return EmailAddress::fromNative($value);
    }

    /**
     * Test isEmpty method.
     */
    public function testIsEmpty()
    {
        $this
            ->given($email = EmailAddress::fromNative($this->randomNativeValue()))
            ->then()
                ->boolean($email->isEmpty())
                    ->isFalse()
            ->exception(function () {
                EmailAddress::fromNative('');
            })->isInstanceOf(\InvalidArgumentException::class)
        ;
    }

    /**
     * Test IsValid method.
     */
    public function testIsValid()
    {
        $this
            ->boolean(EmailAddress::isValid($this->randomNativeValue()))
                ->isTrue()
            ->boolean(EmailAddress::isValid($this->invalidNativeValue()))
                ->isFalse()
        ;
    }

    /**
     * Test User method.
     */
    public function testUser()
    {
        $this
            ->given($email = EmailAddress::fromNative('ivannis.suarez@gmail.com'))
            ->then()
                ->object($email->user())
                    ->isEqualTo(StringLiteral::fromNative('ivannis.suarez'))
        ;
    }

    /**
     * Test Domain method.
     */
    public function testDomain()
    {
        $this
            ->given($email = EmailAddress::fromNative('ivannis.suarez@gmail.com'))
            ->then()
                ->object($email->domain())
                    ->isEqualTo(StringLiteral::fromNative('gmail.com'))
        ;
    }
}
