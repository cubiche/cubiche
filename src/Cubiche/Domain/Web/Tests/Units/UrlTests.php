<?php

/**
 * This file is part of the Cubiche/Web component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\Web\Tests\Units;

use Cubiche\Core\Validator\Exception\InvalidArgumentException;
use Cubiche\Domain\System\StringLiteral;
use Cubiche\Domain\System\Tests\Units\StringLiteralTests;
use Cubiche\Domain\Web\HostName;
use Cubiche\Domain\Web\Path;
use Cubiche\Domain\Web\Port;
use Cubiche\Domain\Web\Url;

/**
 * UrlTests class.
 *
 * Generated by TestGenerator on 2017-03-15 at 11:36:08.
 */
class UrlTests extends StringLiteralTests
{
    /**
     * {@inheritdoc}
     */
    protected function randomNativeValue()
    {
        return $this->faker->url;
    }

    /**
     * {@inheritdoc}
     */
    protected function invalidNativeValue()
    {
        return 'wrong@url\\';
    }

    /**
     * {@inheritdoc}
     */
    protected function uniqueNativeValue()
    {
        return $this->faker->unique()->url;
    }

    /**
     * {@inheritdoc}
     */
    protected function fromNative($value)
    {
        return Url::fromNative($value);
    }

    /**
     * Test isEmpty method.
     */
    public function testIsEmpty()
    {
        $this
            ->given($url = Url::fromNative($this->randomNativeValue()))
            ->then()
                ->boolean($url->isEmpty())
                    ->isFalse()
                ->exception(function () {
                    Url::fromNative('');
                })->isInstanceOf(InvalidArgumentException::class)
        ;
    }

    /**
     * Test Host method.
     */
    public function testHost()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->host())
                    ->isEqualTo(HostName::fromNative('foo.com'))
        ;
    }

    /**
     * Test FragmentId method.
     */
    public function testFragmentId()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->fragmentId())
                    ->isEqualTo(StringLiteral::fromNative('#fragmentidentifier'))
        ;
    }

    /**
     * Test Password method.
     */
    public function testPassword()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->password())
                    ->isEqualTo(StringLiteral::fromNative('pass'))
        ;
    }

    /**
     * Test Path method.
     */
    public function testPath()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->path())
                    ->isEqualTo(Path::fromNative('/bar'))
        ;
    }

    /**
     * Test Port method.
     */
    public function testPort()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->port())
                    ->isEqualTo(Port::fromNative(80))
        ;
    }

    /**
     * Test QueryString method.
     */
    public function testQueryString()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->queryString())
                    ->isEqualTo(StringLiteral::fromNative('?querystring'))
        ;
    }

    /**
     * Test Scheme method.
     */
    public function testScheme()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->scheme())
                    ->isEqualTo(StringLiteral::fromNative('http'))
        ;
    }

    /**
     * Test User method.
     */
    public function testUser()
    {
        $this
            ->given($url = Url::fromNative('http://user:pass@foo.com:80/bar?querystring#fragmentidentifier'))
            ->then()
                ->object($url->user())
                    ->isEqualTo(StringLiteral::fromNative('user'))
        ;
    }
}
