<?php

/**
 * This file is part of the Cubiche/Model component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\Model\Tests\Units;

use Cubiche\Core\Validator\Exception\ValidationException;
use Cubiche\Core\Validator\Validator;
use Cubiche\Domain\Model\EventSourcing\EventStream;
use Cubiche\Domain\Model\Tests\Fixtures\Blog;
use Cubiche\Domain\Model\Tests\Fixtures\Category;
use Cubiche\Domain\Model\Tests\Fixtures\Event\PostTitleWasChanged;
use Cubiche\Domain\Model\Tests\Fixtures\Event\PostWasCreated;
use Cubiche\Domain\Model\Tests\Fixtures\Post;
use Cubiche\Domain\Model\Tests\Fixtures\PostId;
use Cubiche\Domain\Model\Tests\Fixtures\Tag;

/**
 * AggregateRootTests class.
 *
 * Generated by TestGenerator on 2016-05-03 at 16:01:26.
 */
class AggregateRootTests extends TestCase
{
    /**
     * Test recordApplyAndPublishEvent method.
     */
    public function testRecordApplyAndPublishEvent()
    {
        $this
            ->given(
                $post = Post::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->then()
                ->array($post->recordedEvents())
                    ->hasSize(1)
        ;
    }

    /**
     * Test applyEvent method.
     */
    public function testApplyEventWithoutApplyMethod()
    {
        $this
            ->given(
                $post = Post::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->then()
                ->exception(function () use ($post) {
                    $post->publish();
                })->isInstanceOf(\BadMethodCallException::class)
        ;
    }

    /**
     * Test ClearEvents method.
     */
    public function testClearEvents()
    {
        $this
            ->given(
                $post = Post::create(
                    $this->faker->sentence(),
                    $this->faker->paragraph()
                )
            )
            ->then()
                ->array($post->recordedEvents())
                    ->hasSize(1)
            ->and()
            ->when($post->clearEvents())
            ->then()
                ->array($post->recordedEvents())
                    ->isEmpty()
        ;
    }

    /**
     * Test LoadFromHistory method.
     */
    public function testLoadFromHistory()
    {
        $this
            ->given($title = $this->faker->sentence())
            ->and($content = $this->faker->paragraph())
            ->and($newTitle = $this->faker->sentence())
            ->and($post = Post::create($title, $content))
            ->and($post->changeTitle($newTitle))
            ->and(
                $eventStream = new EventStream(
                    Post::class,
                    $post->id(),
                    [
                        new PostWasCreated($post->id(), $title, $content),
                        new PostTitleWasChanged($post->id(), $newTitle),
                    ]
                )
            )
            ->when($other = Post::loadFromHistory($eventStream))
            ->then()
                ->boolean($post->equals($other))
                    ->isTrue()
        ;
    }

    /**
     * Test Replay method.
     */
    public function testReplayWithInvalidEventStream()
    {
        $this
            ->given($post = Post::create($this->faker->sentence(), $this->faker->paragraph()))
            ->and(
                $eventStream = new EventStream(
                    Category::class,
                    PostId::fromNative('123'),
                    [
                        new PostTitleWasChanged(PostId::fromNative('123'), $this->faker->sentence()),
                    ]
                )
            )
            ->then()
                ->exception(function () use ($post, $eventStream) {
                    $post->replay($eventStream);
                })->isInstanceOf(\InvalidArgumentException::class)
        ;
    }

    /**
     * Test validator method.
     */
    public function testValidator()
    {
        $this
            ->given($post = Post::create($this->faker->sentence(), $this->faker->paragraph()))
            ->then()
                ->object($post->validator())
                    ->isInstanceOf(Validator::class)
        ;

        $this
            ->given($blog = Blog::create())
            ->then()
                ->exception(function () use ($blog) {
                    $blog->validator();
                })->isInstanceOf(\InvalidArgumentException::class)
        ;

        $this
            ->given($tag = Tag::create())
            ->then()
                ->object($tag->validator())
                    ->isInstanceOf(Validator::class)
        ;
    }

    /**
     * Test validation.
     */
    public function testValidation()
    {
        $this
            ->given($post = Post::create($this->faker->sentence(), $this->faker->paragraph()))
            ->when($post->changeTitle($this->faker->sentence()))
            ->then()
                ->array($post->recordedEvents())
                    ->hasSize(2)
            ->and()
                ->exception(function () use ($post) {
                    $post->changeTitle('');
                })->isInstanceOf(ValidationException::class)
                ->exception(function () use ($post) {
                    $post->changeTitle(10);
                })->isInstanceOf(ValidationException::class)
        ;
    }
}
