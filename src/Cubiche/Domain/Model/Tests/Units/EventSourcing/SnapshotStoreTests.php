<?php

/**
 * This file is part of the Cubiche/Model component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\Model\Tests\Units\EventSourcing;

use Cubiche\Core\Serializer\DefaultSerializer;
use Cubiche\Core\Storage\InMemoryStorage;
use Cubiche\Domain\Model\EventSourcing\Snapshot;
use Cubiche\Domain\Model\EventSourcing\SnapshotStore;
use Cubiche\Domain\Model\Tests\Fixtures\Post;
use Cubiche\Domain\Model\Tests\Fixtures\PostId;
use Cubiche\Domain\Model\Tests\Units\TestCase;

/**
 * SnapshotStoreTests class.
 *
 * Generated by TestGenerator on 2016-05-03 at 16:01:26.
 */
class SnapshotStoreTests extends TestCase
{
    /**
     * Test Persist method.
     */
    public function testPersist()
    {
        $this
            ->given($snapshotStore = new SnapshotStore(new InMemoryStorage(), new DefaultSerializer()))
            ->and($post = Post::create($this->faker->sentence(), $this->faker->paragraph()))
            ->and($snapshot = new Snapshot(15, $post))
            ->when($snapshotStore->persist($snapshot))
            ->then()
                ->object($result = $snapshotStore->getSnapshotFor(Post::class, $post->id()))
                    ->isInstanceOf(Snapshot::class)
                ->integer($result->version())
                    ->isEqualTo($snapshot->version())
                ->object($result->aggregate())
                    ->isEqualTo($snapshot->aggregate())
                ->string($result->className())
                    ->isEqualTo($snapshot->className())

        ;
    }

    /**
     * Test GetSnapshotFor method.
     */
    public function testGetSnapshotFor()
    {
        $this
            ->given($snapshotStore = new SnapshotStore(new InMemoryStorage(), new DefaultSerializer()))
            ->then()
                ->variable($snapshotStore->getSnapshotFor(Post::class, PostId::fromNative($this->faker->ean13())))
                    ->isNull()
        ;
    }
}
