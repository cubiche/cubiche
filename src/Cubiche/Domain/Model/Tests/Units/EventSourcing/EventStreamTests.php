<?php

/**
 * This file is part of the Cubiche/Model component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\Model\Tests\Units\EventSourcing;

use Cubiche\Domain\Model\EventSourcing\EventStream;
use Cubiche\Domain\Model\Tests\Fixtures\Event\PostTitleWasChanged;
use Cubiche\Domain\Model\Tests\Fixtures\Post;
use Cubiche\Domain\Model\Tests\Fixtures\PostId;
use Cubiche\Domain\Model\Tests\Units\TestCase;

/**
 * EventStreamTests class.
 *
 * Generated by TestGenerator on 2016-05-03 at 16:01:26.
 */
class EventStreamTests extends TestCase
{
    /**
     * Test ClassName method.
     */
    public function testClassName()
    {
        $this
            ->given($eventStream = new EventStream(Post::class, PostId::fromNative($this->faker->ean13()), []))
            ->then()
                ->string($eventStream->className())
                    ->isEqualTo(Post::class)
        ;
    }

    /**
     * Test AggregateId method.
     */
    public function testAggregateId()
    {
        $this
            ->given($postId = PostId::fromNative($this->faker->ean13()))
            ->and($eventStream = new EventStream(Post::class, $postId, []))
            ->then()
                ->object($eventStream->aggregateId())
                    ->isEqualTo($postId)
        ;
    }

    /**
     * Test Events method.
     */
    public function testEvents()
    {
        $this
            ->given($eventStream = new EventStream(Post::class, PostId::fromNative($this->faker->ean13()), []))
            ->then()
                ->array($eventStream->events())
                    ->isEmpty()
        ;

        $this
            ->given(
                $eventStream = new EventStream(
                    Post::class,
                    PostId::fromNative($this->faker->ean13()),
                    [
                        new PostTitleWasChanged(
                            PostId::fromNative($this->faker->ean13()),
                            $this->faker->sentence()
                        ),
                    ]
                )
            )
            ->then()
                ->array($eventStream->events())
                    ->hasSize(1)
        ;

        $this
            ->given(
                $events = [
                    new PostTitleWasChanged(
                        PostId::fromNative($this->faker->ean13()),
                        $this->faker->sentence()
                    ),
                    new \StdClass(),
                ]
            )
            ->then()
                ->exception(function () use ($events) {
                    new EventStream(
                        Post::class,
                        PostId::fromNative($this->faker->ean13()),
                        $events
                    );
                })
                ->isInstanceOf(\InvalidArgumentException::class)
        ;
    }
}
