<?php

/**
 * This file is part of the Cubiche/Event component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\EventPublisher\Tests\Units;

use Cubiche\Domain\EventPublisher\DomainEvent;
use Cubiche\Domain\EventPublisher\Tests\Fixtures\IncrementCounterEvent;

/**
 * DomainEvent class.
 *
 * Generated by TestGenerator on 2016-05-03 at 14:58:41.
 */
class DomainEventTests extends TestCase
{
    /**
     * Test eventName method.
     */
    public function testEventName()
    {
        $this
            ->given($event = new DomainEvent())
            ->then()
                ->string($event->eventName())
                    ->isEqualTo(DomainEvent::class)
                ->and()
                ->when($event = new DomainEvent('on_push'))
                ->then()
                    ->string($event->eventName())
                        ->isEqualTo('on_push')
        ;
    }

    /**
     * Test OccurredOn method.
     */
    public function testOccurredOn()
    {
        $this
            ->given($event = new DomainEvent())
            ->then()
                ->object($event->occurredOn())
                    ->isInstanceOf(\DateTime::class)
        ;
    }

    /**
     * Test StopPropagation method.
     */
    public function testStopPropagation()
    {
        $this
            ->given($event = new DomainEvent())
            ->then()
                ->boolean($event->isPropagationStopped())
                    ->isFalse()
                ->and()
                ->when($event->stopPropagation())
                ->then()
                    ->boolean($event->isPropagationStopped())
                        ->isTrue()
        ;
    }

    /**
     * Test SetPayload method.
     */
    public function testSetPayload()
    {
        $this
            ->given($event = new IncrementCounterEvent(5))
            ->then()
                ->object($event->occurredOn())
                    ->isInstanceOf(\DateTime::class)
                ->integer($event->step())
                    ->isEqualTo(5)
        ;
    }

    /**
     * Test serialize/deserialize method.
     */
    public function testSerializeDeserialize()
    {
        $this
            ->given($event = new IncrementCounterEvent(3))
            ->and($eventDeserialized = IncrementCounterEvent::deserialize($event->serialize()))
            ->then()
                ->object($eventDeserialized)
                    ->isInstanceOf(IncrementCounterEvent::class)
                ->object($event->occurredOn())
                    ->isEqualTo($eventDeserialized->occurredOn())
                ->string($event->eventName())
                    ->isEqualTo($eventDeserialized->eventName())
                ->integer($event->step())
                    ->isEqualTo($eventDeserialized->step())
                ->boolean($event->isPropagationStopped())
                    ->isEqualTo($eventDeserialized->isPropagationStopped())
        ;
    }
}
