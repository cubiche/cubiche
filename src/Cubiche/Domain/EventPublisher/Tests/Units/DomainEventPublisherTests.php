<?php

/**
 * This file is part of the Cubiche/Event component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventPublisher\Tests\Units;

use Cubiche\Core\Bus\Event\EventBus;
use Cubiche\Domain\EventPublisher\DomainEventPublisher;
use Cubiche\Domain\EventPublisher\Tests\Fixtures\CounterEventSubscriber;
use Cubiche\Domain\EventPublisher\Tests\Fixtures\DecrementCounterEvent;
use Cubiche\Domain\EventPublisher\Tests\Fixtures\IncrementCounterEvent;

/**
 * DomainEventPublisher class.
 *
 * Generated by TestGenerator on 2016-05-03 at 14:58:41.
 */
class DomainEventPublisherTests extends TestCase
{
    /**
     * Test publish/subscribe method.
     */
    public function testPublishSubscribe()
    {
        $this
            ->given($incrementEvent = new IncrementCounterEvent(5))
            ->and($decrementEvent = new DecrementCounterEvent(3))
            ->and($counterSubscriber = new CounterEventSubscriber())
            ->and(DomainEventPublisher::subscribe($counterSubscriber))
            ->when(DomainEventPublisher::publish($incrementEvent))
            ->then()
                ->integer($counterSubscriber->counter())
                    ->isEqualTo(5)
            ->when(DomainEventPublisher::publish($incrementEvent))
            ->then()
                ->integer($counterSubscriber->counter())
                    ->isEqualTo(10)
            ->when(DomainEventPublisher::publish($decrementEvent))
            ->then()
                ->integer($counterSubscriber->counter())
                    ->isEqualTo(7)
        ;
    }

    /**
     * Test set method.
     */
    public function testSet()
    {
        $this
            ->given($incrementEvent = new IncrementCounterEvent(5))
            ->and($decrementEvent = new DecrementCounterEvent(3))
            ->and($counterSubscriber = new CounterEventSubscriber())
            ->and(DomainEventPublisher::set(EventBus::create()))
            ->and(DomainEventPublisher::subscribe($counterSubscriber))
            ->when(DomainEventPublisher::publish($incrementEvent))
            ->then()
                ->integer($counterSubscriber->counter())
                    ->isEqualTo(5)
            ->when(DomainEventPublisher::publish($incrementEvent))
            ->then()
                ->integer($counterSubscriber->counter())
                    ->isEqualTo(10)
            ->when(DomainEventPublisher::publish($decrementEvent))
            ->then()
                ->integer($counterSubscriber->counter())
                    ->isEqualTo(7)
        ;
    }
}
