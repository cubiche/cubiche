<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Migrations\Generator;

use Cubiche\Domain\EventSourcing\Migrations\Generator\Template;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;

/**
 * TemplateTests class.
 *
 * Generated by TestGenerator on 2016-08-10 at 10:18:25.
 */
class TemplateTests extends TestCase
{
    /**
     * @var string
     */
    protected $filename = __DIR__.'/../../../../Migrations/Generator/Templates/MigrationClass.tpl';

    /**
     * Test SetFile method.
     */
    public function testSetFile()
    {
        $this
            ->given($template = new Template($this->filename))
            ->and($reflector = new \ReflectionClass($template))
            ->and($reflectionProperty = $reflector->getProperty('template'))
            ->and($reflectionProperty->setAccessible(true))
            ->then()
                ->string($reflectionProperty->getValue($template))
                    ->isEqualTo(file_get_contents($this->filename.'.dist'))
                ->and()
                ->when($template->setFile(__DIR__.'/TemplateTests.php'))
                ->then()
                    ->string($reflectionProperty->getValue($template))
                        ->isEqualTo(file_get_contents(__DIR__.'/TemplateTests.php'))
                ->and()
                    ->exception(function () use ($template) {
                        $template->setFile(__DIR__.'/Foo.php');
                    })->isInstanceOf(\InvalidArgumentException::class)
        ;
    }

    /**
     * Test SetVar method.
     */
    public function testSetVar()
    {
        $this
            ->given($template = new Template($this->filename))
            ->and($reflector = new \ReflectionClass($template))
            ->and($reflectionProperty = $reflector->getProperty('values'))
            ->and($reflectionProperty->setAccessible(true))
            ->when($template->setVar(array('foo' => 'bar')))
            ->then()
                ->array($reflectionProperty->getValue($template))
                    ->isEqualTo(array('foo' => 'bar'))
                ->and()
                ->when($template->setVar(array('baz' => 123)))
                ->then()
                    ->array($reflectionProperty->getValue($template))
                        ->isEqualTo(array('foo' => 'bar', 'baz' => 123))
        ;
    }

    /**
     * Test Render method.
     */
    public function testRender()
    {
        $this
            ->given($template = new Template($this->filename))
            ->and(
                $values = array(
                    'namespace' => 'namespace Some\ClassNamespace;',
                    'migrationClassName' => 'FooMigration',
                    'use' => 'use Some\AggregateRoot\ClassName;',
                    'migrationType' => 'VersionIncrementType::MAJOR()',
                    'aggregateClassName' => 'ClassName',
                    'date' => '2016-08-16',
                    'time' => '11:31:00',
                )
            )
            ->and($template->setVar($values))
            ->and(
                $keys = array_map(function ($key) {
                    return '{'.$key.'}';
                }, array_keys($values))
            )
            ->when($result = $template->render())
            ->then()
                ->string($result)
                    ->isEqualTo(str_replace($keys, $values, file_get_contents($this->filename.'.dist')))
        ;
    }

    /**
     * Test RenderTo method.
     */
    public function testRenderTo()
    {
        $target = __DIR__.'/../Cli/Migrations/Version_8_7_5/MigrationClass.php';

        $this
            ->given($template = new Template($this->filename))
            ->and(
                $values = array(
                    'namespace' => 'namespace Some\ClassNamespace;',
                    'migrationClassName' => 'FooMigration',
                    'use' => 'use Some\AggregateRoot\ClassName;',
                    'migrationType' => 'VersionIncrementType::MAJOR()',
                    'aggregateClassName' => 'ClassName',
                    'date' => '2016-08-16',
                    'time' => '11:31:00',
                )
            )
            ->and($template->setVar($values))
            ->and(
                $keys = array_map(function ($key) {
                    return '{'.$key.'}';
                }, array_keys($values))
            )
            ->then()
                ->exception(function () use ($template, $target) {
                    $template->renderTo($target);
                })->isInstanceOf(\RuntimeException::class)
                ->and()
                ->when(mkdir(dirname($target), 0777, true))
                ->and($template->renderTo($target))
                ->then()
                    ->string(file_get_contents($target))
                        ->isEqualTo(str_replace($keys, $values, file_get_contents($this->filename.'.dist')))
        ;
    }
}
