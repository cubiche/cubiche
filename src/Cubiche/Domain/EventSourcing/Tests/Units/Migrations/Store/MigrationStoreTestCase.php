<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Migrations\Store;

use Cubiche\Domain\EventSourcing\Migrations\Migration;
use Cubiche\Domain\EventSourcing\Migrations\Store\MigrationStoreInterface;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourced;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Cubiche\Domain\EventSourcing\Versioning\Version;

/**
 * MigrationStoreTestCase class.
 *
 * Generated by TestGenerator on 2016-08-31 at 15:14:45.
 */
abstract class MigrationStoreTestCase extends TestCase
{
    /**
     * @return MigrationStoreInterface
     */
    abstract protected function createStore();

    /**
     * Test Persist method.
     */
    public function testPersist()
    {
        require_once __DIR__.'/../../../Fixtures/BlogEventSourced.php';

        $this
            ->given($store = $this->createStore())
            ->and($aggregates = [PostEventSourced::class, \BlogEventSourced::class])
            ->and($version = Version::fromString('0.2.0'))
            ->and($migration = new Migration($aggregates, $version, new \DateTime()))
            ->when($store->persist($migration))
            ->then()
                ->sizeOf($store->findAll())
                    ->isEqualTo(1)
                ->integer($store->count())
                    ->isEqualTo(1)
        ;
    }

    /**
     * Test HasVersion method.
     */
    public function testHasVersion()
    {
        $this
            ->given($store = $this->createStore())
            ->and($aggregates = [PostEventSourced::class])
            ->and($version = Version::fromString('0.2.0'))
            ->and($version3 = Version::fromString('3.0.0'))
            ->and($createdAt = new \DateTime())
            ->and($migration = new Migration($aggregates, $version, $createdAt))
            ->when($store->persist($migration))
            ->then()
                ->boolean($store->hasVersion($version))
                    ->isTrue()
                ->boolean($store->hasVersion($version3))
                    ->isFalse()
                ->and()
                ->when($store->persist(new Migration($aggregates, $version3, new \DateTime())))
                ->then()
                    ->boolean($store->hasVersion($version3))
                        ->isTrue()
        ;
    }

    /**
     * Test FindAll method.
     */
    public function testFindAll()
    {
        $this
            ->given($store = $this->createStore())
            ->and($aggregates = [PostEventSourced::class])
            ->and($migration1 = new Migration($aggregates, Version::fromString('0.1.0'), new \DateTime()))
            ->and($migration2 = new Migration($aggregates, Version::fromString('0.2.0'), new \DateTime()))
            ->when($store->persist($migration1))
            ->and($store->persist($migration2))
            ->then()
                ->sizeOf($store->findAll())
                    ->isEqualTo(2)
                ->array($store->findAll())
                    ->isEqualTo(array($migration2, $migration1))
                ->integer($store->count())
                    ->isEqualTo(2)
        ;
    }

    /**
     * Test GetLast method.
     */
    public function testGetLast()
    {
        $this
            ->given($store = $this->createStore())
            ->and($aggregates = [PostEventSourced::class])
            ->and($migration1 = new Migration($aggregates, Version::fromString('0.1.0'), new \DateTime()))
            ->and($migration2 = new Migration($aggregates, Version::fromString('0.2.0'), new \DateTime()))
            ->when($store->persist($migration2))
            ->and($store->persist($migration1))
            ->then()
                ->object($store->getLast())
                    ->isEqualTo($migration2)
        ;
    }
}
