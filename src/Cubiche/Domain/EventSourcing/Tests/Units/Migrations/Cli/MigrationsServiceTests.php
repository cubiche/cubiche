<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Migrations\Cli;

use Cubiche\Domain\EventSourcing\Migrations\Cli\Command\MigrationsGenerateCommand;
use Cubiche\Domain\EventSourcing\Migrations\Cli\MigrationsService;
use Cubiche\Domain\EventSourcing\Migrations\Generator\MigrationGenerator;
use Cubiche\Domain\EventSourcing\Migrations\MigrationInterface;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourced;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Cubiche\Domain\EventSourcing\Versioning\VersionIncrementType;
use Cubiche\Tests\Generator\ClassUtils;
use Webmozart\Console\Api\IO\Input;
use Webmozart\Console\Api\IO\IO;
use Webmozart\Console\Api\IO\Output;
use Webmozart\Console\IO\InputStream\NullInputStream;
use Webmozart\Console\IO\OutputStream\BufferedOutputStream;

/**
 * MigrationsServiceTests class.
 *
 * Generated by TestGenerator on 2016-08-10 at 10:18:25.
 */
class MigrationsServiceTests extends TestCase
{
    /**
     * @var string
     */
    protected $migrationsDirectory = __DIR__.'/Migrations';

    /**
     * @var BufferedOutputStream
     */
    protected $output;

    /**
     * @return MigrationsService
     */
    protected function createService()
    {
        if (is_dir($this->migrationsDirectory)) {
            system('rm -rf '.escapeshellarg($this->migrationsDirectory));
        }

        return new MigrationsService(new MigrationGenerator($this->migrationsDirectory));
    }

    /**
     * @param string $aggregateClassName
     *
     * @return string
     */
    protected function getMigratorFileName($aggregateClassName)
    {
        return $this->migrationsDirectory.'/V0_1_0/'.
            str_replace('\\', '/', $aggregateClassName).'Migration.php'
        ;
    }

    /**
     * @param string $filename
     *
     * @return MigrationInterface
     */
    protected function getMigratorClass($filename)
    {
        require_once $filename;
        $classes = ClassUtils::getClassesInFile($filename);
        foreach ($classes as $className) {
            $reflector = new \ReflectionClass($className);

            return $reflector->newInstanceWithoutConstructor();
        }

        return;
    }

    /**
     * @return IO
     */
    protected function getIO()
    {
        $this->output = new BufferedOutputStream();

        return new IO(
            new Input(new NullInputStream()),
            new Output($this->output),
            new Output(new BufferedOutputStream())
        );
    }

    /**
     * Test MigrationsGenerate method.
     */
    public function testMigrationsGenerate()
    {
        $this
            ->given($service = $this->createService())
            ->and($command = new MigrationsGenerateCommand(null, PostEventSourced::class))
            ->and($command->setIo($this->getIO()))
            ->when($service->migrationsGenerate($command))
            ->and($migrationFilename = $this->getMigratorFileName(PostEventSourced::class))
            ->and($migrationClass = $this->getMigratorClass($migrationFilename))
            ->then()
                ->boolean(file_exists($migrationFilename))
                    ->isTrue()
                ->string($migrationClass->aggregateClassName())
                    ->isEqualTo(PostEventSourced::class)
                ->object($migrationClass->migrationType())
                    ->isEqualTo(VersionIncrementType::MINOR())
                ->string($this->output->fetch())
                    ->contains('Generating migration')
                    ->contains('successfully generated')
                ->and()
                ->when($service->migrationsGenerate($command))
                ->then()
                    ->string($this->output->fetch())
                        ->contains('already exists.')
        ;

        $this
            ->given($service = $this->createService())
            ->and($command = new MigrationsGenerateCommand(null, __DIR__.'/../../../Fixtures/PostEventSourced.php'))
            ->and($command->setIo($this->getIO()))
            ->when($service->migrationsGenerate($command))
            ->and($migrationFilename = $this->getMigratorFileName(PostEventSourced::class))
            ->and($migrationClass = $this->getMigratorClass($migrationFilename))
            ->then()
                ->boolean(file_exists($migrationFilename))
                    ->isTrue()
                ->string($migrationClass->aggregateClassName())
                    ->isEqualTo(PostEventSourced::class)
                ->object($migrationClass->migrationType())
                    ->isEqualTo(VersionIncrementType::MINOR())
        ;

        $this
            ->given($service = $this->createService())
            ->and(
                $command = new MigrationsGenerateCommand(
                    null,
                    __DIR__.'/../../../../Migrations/MigrationInterface.php'
                )
            )
            ->and($command->setIo($this->getIO()))
            ->when($service->migrationsGenerate($command))
            ->and($migrationFilename = $this->getMigratorFileName(PostEventSourced::class))
            ->then()
                ->boolean(file_exists($migrationFilename))
                    ->isFalse()
                ->string($this->output->fetch())
                    ->contains('Invalid class name')
        ;

        $this
            ->given($service = $this->createService())
            ->and($command = new MigrationsGenerateCommand())
            ->and($command->setIo($this->getIO()))
            ->when($service->migrationsGenerate($command))
            ->and($migrationFilename = $this->getMigratorFileName(PostEventSourced::class))
            ->then()
                ->boolean(file_exists($migrationFilename))
                    ->isFalse()
                ->string($this->output->fetch())
                    ->contains('A version number or an aggregate class name is needed.')

        ;
    }

    /**
     * Test MigrationsMigrate method.
     */
    public function testMigrationsMigrate()
    {
        // todo: Implement testMigrationsMigrate().
    }

    /**
     * Test MigrationsStatus method.
     */
    public function testMigrationsStatus()
    {
        // todo: Implement testMigrationsStatus().
    }
}
