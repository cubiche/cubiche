<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Migrations\Cli;

use Cubiche\Core\Bus\Command\CommandBus;
use Cubiche\Core\Console\ConsoleApplication;
use Cubiche\Domain\EventPublisher\DomainEventPublisher;
use Cubiche\Domain\EventSourcing\Migrations\Cli\ApplicationConfig;
use Cubiche\Domain\EventSourcing\Migrations\Cli\Command\MigrationsGenerateCommand;
use Cubiche\Domain\EventSourcing\Migrations\Cli\Command\MigrationsMigrateCommand;
use Cubiche\Domain\EventSourcing\Migrations\Cli\Command\MigrationsStatusCommand;
use Cubiche\Domain\EventSourcing\Migrations\Cli\MigrationsService;
use Cubiche\Domain\EventSourcing\Migrations\Migrator;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourced;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Webmozart\Console\Api\IO\Input;
use Webmozart\Console\Api\IO\IO;
use Webmozart\Console\Api\IO\Output;
use Webmozart\Console\Args\ArgvArgs;
use Webmozart\Console\IO\InputStream\StringInputStream;
use Webmozart\Console\IO\OutputStream\BufferedOutputStream;

/**
 * ApplicationConfigTests class.
 *
 * Generated by TestGenerator on 2016-08-10 at 10:18:25.
 */
class ApplicationConfigTests extends TestCase
{
    /**
     * @return ApplicationConfig
     */
    protected function createConfiguration()
    {
        $config = new ApplicationConfig();
        $config->setCatchExceptions(false);
        $config->setTerminateAfterRun(false);
        $config->setIOFactory(function ($application, $args, $inputStream, $outputStream, $errorStream) {
            return new IO(new Input($inputStream), new Output($outputStream), new Output($errorStream));
        });

        return $config;
    }

    /**
     * @param callable|ApplicationConfig $config
     *
     * @return ConsoleApplication
     */
    protected function createApplication($config)
    {
        $commandBus = CommandBus::create();
        $eventBus = DomainEventPublisher::eventBus();

        $migrationsService = new MigrationsService(
            new Migrator($this->getClassMetadataFactory(), $this->migrationsDirectory)
        );

        $commandBus->addHandler(MigrationsGenerateCommand::class, $migrationsService);
        $commandBus->addHandler(MigrationsMigrateCommand::class, $migrationsService);
        $commandBus->addHandler(MigrationsStatusCommand::class, $migrationsService);

        return new ConsoleApplication($config, $commandBus, $eventBus);
    }

    /**
     * Test run migrations generate command.
     */
    public function testRunMigrationsGenerateCommand()
    {
        $this
            ->given($config = $this->createConfiguration())
            ->and($application = $this->createApplication($config))
            ->and(
                $args = new ArgvArgs(
                    array('migrations', 'eventsourcing', 'migrations-generate', PostEventSourced::class)
                )
            )
            ->and($input = new StringInputStream(''))
            ->and($output = new BufferedOutputStream())
            ->and($errorOutput = new BufferedOutputStream())
            ->when($application->run($args, $input, $output, $errorOutput))
            ->then()
                ->string($output->fetch())
                    ->contains('Generating migration')
                    ->contains('The migration file has been <c1>successfully generated</c1>')
        ;
    }
}
