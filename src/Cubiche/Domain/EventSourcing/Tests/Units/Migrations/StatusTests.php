<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Migrations;

use Cubiche\Domain\EventSourcing\Migrations\Migration;
use Cubiche\Domain\EventSourcing\Migrations\Status;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Cubiche\Domain\EventSourcing\Versioning\Version;

/**
 * StatusTests class.
 *
 * Generated by TestGenerator on 2016-06-28 at 14:36:54.
 */
class StatusTests extends TestCase
{
    /**
     * Test currentMigration method.
     */
    public function testCurrentMigration()
    {
        $this
            ->given($status = new Status())
            ->then()
                ->variable($status->currentMigration())
                    ->isNull()
        ;

        $this
            ->given($migration = new Migration([], Version::fromString('2.4.0')))
            ->and($status = new Status($migration))
            ->then()
                ->object($status->currentMigration())
                    ->isEqualTo($migration)
        ;
    }

    /**
     * Test latestVersion method.
     */
    public function testLatestVersion()
    {
        $this
            ->given($status = new Status())
            ->then()
                ->variable($status->latestVersion())
                    ->isNull()
        ;

        $this
            ->given($migration = new Migration([], Version::fromString('2.4.0')))
            ->and($status = new Status($migration, Version::fromString('1.8.0')))
            ->then()
                ->object($status->latestVersion())
                    ->isEqualTo(Version::fromString('1.8.0'))
        ;
    }

    /**
     * Test numExecutedMigrations method.
     */
    public function testNumExecutedMigrations()
    {
        $this
            ->given($status = new Status())
            ->then()
                ->integer($status->numExecutedMigrations())
                    ->isEqualTo(0)
        ;

        $this
            ->given($migration = new Migration([], Version::fromString('2.4.0')))
            ->and($status = new Status($migration, Version::fromString('1.8.0'), 12))
            ->then()
                ->integer($status->numExecutedMigrations())
                    ->isEqualTo(12)
        ;
    }

    /**
     * Test numAvailableMigrations method.
     */
    public function testNumAvailableMigrations()
    {
        $this
            ->given($status = new Status())
            ->then()
                ->integer($status->numAvailableMigrations())
                    ->isEqualTo(0)
        ;

        $this
            ->given($migration = new Migration([], Version::fromString('2.4.0')))
            ->and($status = new Status($migration, Version::fromString('1.8.0'), 0, 6))
            ->then()
                ->integer($status->numAvailableMigrations())
                    ->isEqualTo(6)
        ;
    }

    /**
     * Test numNewMigrations method.
     */
    public function testNumNewMigrations()
    {
        $this
            ->given($status = new Status())
            ->then()
                ->integer($status->numNewMigrations())
                    ->isEqualTo(0)
        ;

        $this
            ->given($migration = new Migration([], Version::fromString('2.4.0')))
            ->and($status = new Status($migration, Version::fromString('1.8.0'), 0, 0, 3))
            ->then()
                ->integer($status->numNewMigrations())
                    ->isEqualTo(3)
        ;
    }
}
