<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Migrations;

use Cubiche\Domain\EventSourcing\EventStore\EventStream;
use Cubiche\Domain\EventSourcing\EventStore\InMemoryEventStore;
use Cubiche\Domain\EventSourcing\Migrations\Migration;
use Cubiche\Domain\EventSourcing\Migrations\MigratorWithSnapshot;
use Cubiche\Domain\EventSourcing\Migrations\Store\InMemoryMigrationStore;
use Cubiche\Domain\EventSourcing\Snapshot\InMemorySnapshotStore;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\Event\PostTitleWasChanged;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\Event\PostWasCreated;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourced;
use Cubiche\Domain\EventSourcing\Versioning\Version;
use Cubiche\Domain\EventSourcing\Versioning\VersionManager;
use Cubiche\Domain\Model\Tests\Fixtures\PostId;

/**
 * MigratorWithSnapshotTests class.
 *
 * Generated by TestGenerator on 2016-10-06 at 17:03:40.
 */
class MigratorWithSnapshotTests extends MigratorTests
{
    /**
     * @return Migrator
     */
    protected function createMigrator()
    {
        return new MigratorWithSnapshot(
            $this->getClassMetadataFactory(),
            new InMemoryMigrationStore(),
            new InMemoryEventStore(),
            new InMemorySnapshotStore(),
            $this->migrationsDirectory
        );
    }

    /**
     * Test migrate method.
     */
    public function testMigrate()
    {
        $this->migrationsDirectory = __DIR__.'/../../Fixtures/Migrations';
        require_once __DIR__.'/../../Fixtures/BlogEventSourced.php';

        // simulate an application and aggregate version state
        $currentApplicationVersion = Version::fromString('0.1.0');
        $aggregateVersion = Version::fromString('0.1.0');

        VersionManager::setCurrentApplicationVersion($currentApplicationVersion);
        VersionManager::persistVersionOfClass(PostEventSourced::class, $aggregateVersion);
        VersionManager::persistVersionOfClass(\BlogEventSourced::class, $aggregateVersion);

        // creating migration store
        $aggregates = [PostEventSourced::class, \BlogEventSourced::class];
        $migratorStore = new InMemoryMigrationStore();
        $migratorStore->persist(new Migration($aggregates, $aggregateVersion, new \DateTime()));

        // creating event store
        $eventStore = new InMemoryEventStore();

        // add the event store flow
        $postId1 = PostId::fromNative(md5(rand()));
        $postEventStream1 = new EventStream(
            $this->streamName(PostEventSourced::class),
            $postId1,
            [
                new PostWasCreated($postId1, 'Best restaurants in barcelona', 'empty'),
                new PostTitleWasChanged($postId1, 'Best cuban restaurants in barcelona'),
            ]
        );

        $postId2 = PostId::fromNative(md5(rand()));
        $postEventStream2 = new EventStream(
            $this->streamName(PostEventSourced::class),
            $postId2,
            [
                new PostWasCreated($postId2, 'Best things to do with children in barcelona', 'empty'),
                new PostTitleWasChanged($postId2, 'Things to do with children in barcelona this weekend'),
            ]
        );

        $eventStore->persist($postEventStream1, $aggregateVersion, $currentApplicationVersion);
        $eventStore->persist($postEventStream2, $aggregateVersion, $currentApplicationVersion);

        // fake BlogEventSourced event stream
        $postId3 = PostId::fromNative(md5(rand()));
        $postEventStream2 = new EventStream(
            $this->streamName(\BlogEventSourced::class),
            $postId3,
            []
        );

        $eventStore->persist($postEventStream2, $aggregateVersion, $currentApplicationVersion);

        // creating snapshot store
        $snapshotStore = new InMemorySnapshotStore();

        // creating the migrator
        $migrator = new MigratorWithSnapshot(
            $this->getClassMetadataFactory(),
            $migratorStore,
            $eventStore,
            $snapshotStore,
            $this->migrationsDirectory
        );

        $emptyMigrator = new MigratorWithSnapshot(
            $this->getClassMetadataFactory(),
            $migratorStore,
            $eventStore,
            $snapshotStore,
            __DIR__.'/../../Fixtures/EmptyMigrations'
        );

        $this
            ->given($result = $emptyMigrator->migrate())
            ->then()
                ->boolean($result)
                    ->isFalse()
        ;

        $this
            ->given($status = $migrator->status())
            ->and($nextVersion = $status->nextAvailableVersion())
            ->then()
                ->boolean($migratorStore->hasMigration($nextVersion))
                    ->isFalse()
                ->variable(
                    $snapshotStore->load('post_event_sourced', $postId1, $aggregateVersion, $currentApplicationVersion)
                )->isNull()
                ->and()
                ->when($result = $migrator->migrate())
                ->and(VersionManager::setCurrentApplicationVersion($migratorStore->getLast()->version()))
                ->then()
                    ->boolean($migratorStore->hasMigration($nextVersion))
                        ->isTrue()
                    ->boolean($result)
                        ->isTrue()
                    ->variable(
                        $snapshotStore->load(
                            'post_event_sourced',
                            $postId1,
                            $aggregateVersion,
                            $nextVersion
                        )
                    )->isNotNull()
                    ->variable(
                        $snapshotStore->load(
                            'post_event_sourced',
                            $postId2,
                            $aggregateVersion,
                            $nextVersion
                        )
                    )->isNotNull()
                    ->and()
                    ->exception(function () use ($migrator) {
                        // because the V1_0_0\BlogEventSourcedMigration class return an invalid stream
                        $migrator->migrate();
                    })->isInstanceOf(\RuntimeException::class)
        ;
    }
}
