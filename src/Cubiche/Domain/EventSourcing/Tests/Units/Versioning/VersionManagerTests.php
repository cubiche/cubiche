<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Versioning;

use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourcedFactory;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Cubiche\Domain\EventSourcing\Versioning\InMemoryVersionStore;
use Cubiche\Domain\EventSourcing\Versioning\Version;
use Cubiche\Domain\EventSourcing\Versioning\VersionManager;

/**
 * VersionManagerTests class.
 *
 * Generated by TestGenerator on 2016-06-28 at 14:36:54.
 */
class VersionManagerTests extends TestCase
{
    /**
     * Test testVersionOf method.
     */
    public function testVersionOf()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($version = VersionManager::versionOf($post))
            ->then()
                ->object($version)
                    ->isEqualTo(Version::fromString('0.0.0'))
        ;
    }

    /**
     * Test SetVersionStore method.
     */
    public function testSetVersionStore()
    {
        $this
            ->given($manager = VersionManager::create())
            ->when($manager->setVersionStore(new InMemoryVersionStore()))
            ->then()
                ->boolean(true)
                    ->isTrue()
        ;
    }

    /**
     * Test persistVersionOf method.
     */
    public function testPersistVersionOf()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($version = VersionManager::versionOf($post))
            ->then()
                ->object($version)
                    ->isEqualTo(Version::fromString('0.0.0'))
                ->and()
                ->when($post->version()->setMinor(23))
                ->and($post->version()->setPatch(45))
                ->and(VersionManager::persistVersionOf($post))
                ->then()
                    ->object(VersionManager::versionOf($post))
                        ->isEqualTo(new Version(0, 23, 0))
                    ->object(VersionManager::versionOf($post, Version::fromString('1.1.0')))
                        ->isEqualTo(new Version(0, 0, 0))
        ;
    }

    /**
     * Test setCurrentApplicationVersion method.
     */
    public function testSetCurrentApplicationVersion()
    {
        $this
            ->given(
                $applicationVersion = Version::fromString('3.2.0')
            )
            ->and(VersionManager::setCurrentApplicationVersion($applicationVersion))
            ->then()
                ->object(VersionManager::currentApplicationVersion())
                    ->isEqualTo($applicationVersion)
        ;
    }
}
