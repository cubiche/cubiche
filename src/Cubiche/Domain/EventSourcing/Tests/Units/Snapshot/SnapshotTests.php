<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Snapshot;

use Cubiche\Domain\EventSourcing\Snapshot\Snapshot;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourcedFactory;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Cubiche\Domain\EventSourcing\Versioning\Version;

/**
 * SnapshotTests class.
 *
 * Generated by TestGenerator on 2016-06-28 at 14:36:54.
 */
class SnapshotTests extends TestCase
{
    /**
     * Test AggregateType method.
     */
    public function testAggregateType()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot('posts', $post, new \DateTimeImmutable()))
            ->then()
                ->string($snapshot->aggregateType())
                    ->isEqualTo('posts')
        ;
    }

    /**
     * Test AggregateId method.
     */
    public function testAggregateId()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot('posts', $post, new \DateTimeImmutable()))
            ->then()
                ->object($snapshot->aggregateId())
                    ->isEqualTo($post->id())
        ;
    }

    /**
     * Test Aggregate method.
     */
    public function testAggregate()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot('posts', $post, new \DateTimeImmutable()))
            ->then()
                ->object($snapshot->aggregate())
                    ->isEqualTo($post)
        ;
    }

    /**
     * Test Version method.
     */
    public function testVersion()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($version = new Version(5, 345))
            ->and($post->setVersion($version))
            ->and($snapshot = new Snapshot('posts', $post, new \DateTimeImmutable()))
            ->then()
                ->object($snapshot->version())
                    ->isEqualTo($post->version())
        ;
    }

    /**
     * Test CreatedAt method.
     */
    public function testCreatedAt()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($createdAt = new \DateTimeImmutable())
            ->and($snapshot = new Snapshot('posts', $post, $createdAt))
            ->then()
                ->object($snapshot->createdAt())
                    ->isEqualTo($createdAt)
        ;
    }
}
