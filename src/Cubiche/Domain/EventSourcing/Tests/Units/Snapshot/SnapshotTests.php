<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\EventSourcing\Tests\Units\Snapshot;

use Cubiche\Domain\EventSourcing\Snapshot\Snapshot;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourcedFactory;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Cubiche\Domain\EventSourcing\Versioning\Version;

/**
 * SnapshotTests class.
 *
 * Generated by TestGenerator on 2016-06-28 at 14:36:54.
 */
class SnapshotTests extends TestCase
{
    /**
     * Test id method.
     */
    public function testId()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot($post->id(), $post))
            ->then()
                ->object($snapshot->id())
                    ->isEqualTo($post->id())
        ;
    }

    /**
     * Test Aggregate method.
     */
    public function testAggregate()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot($post->id(), $post))
            ->then()
                ->object($snapshot->aggregate())
                    ->isEqualTo($post)
        ;
    }

    /**
     * Test Version method.
     */
    public function testVersion()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($post->setVersion(345))
            ->and($snapshot = new Snapshot($post->id(), $post))
            ->then()
                ->integer($snapshot->version())
                    ->isEqualTo($post->version())
                    ->isEqualTo(345)
        ;
    }

    /**
     * Test CreatedAt method.
     */
    public function testCreatedAt()
    {
        $this
            ->given(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot($post->id(), $post))
            ->then()
                ->object($snapshot->createdAt())
                    ->isInstanceOf(\DateTime::class)
        ;
    }
}
