<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Domain\EventSourcing\Tests\Units\Snapshot;

use Cubiche\Domain\EventSourcing\Snapshot\InMemorySnapshotStore;
use Cubiche\Domain\EventSourcing\Snapshot\Snapshot;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourcedFactory;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;
use Cubiche\Domain\Model\Tests\Fixtures\PostId;

/**
 * InMemorySnapshotStoreTests class.
 *
 * Generated by TestGenerator on 2016-06-28 at 14:36:54.
 */
class InMemorySnapshotStoreTests extends TestCase
{
    /**
     * @return InMemorySnapshotStore
     */
    protected function createStore()
    {
        return new InMemorySnapshotStore();
    }

    /**
     * Test Persist method.
     */
    public function testPersist()
    {
        $this
            ->given($store = $this->createStore())
            ->and(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot('posts', $post, new \DateTimeImmutable()))
            ->when($store->persist($snapshot))
            ->then()
                ->object($store->load('posts', $post->id(), $post->version()))
                    ->isEqualTo($snapshot)
        ;
    }

    /**
     * Test Load method.
     */
    public function testLoad()
    {
        $this
            ->given($store = $this->createStore())
            ->and(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot('posts', $post, new \DateTimeImmutable()))
            ->when($store->persist($snapshot))
            ->then()
                ->variable($store->load('blogs', $post->id(), $post->version()))
                    ->isNull()
                ->variable($store->load('posts', PostId::fromNative(md5(rand())), $post->version()))
                    ->isNull()
        ;
    }

    /**
     * Test Remove method.
     */
    public function testRemove()
    {
        $this
            ->given($store = $this->createStore())
            ->and(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot('posts', $post, new \DateTimeImmutable()))
            ->when($store->persist($snapshot))
            ->and($store->remove('blogs', $post->id(), $post->version()))
            ->then()
                ->object($store->load('posts', $post->id(), $post->version()))
                    ->isEqualTo($snapshot)
                ->and()
                ->when($store->remove('posts', $post->id(), $post->version()))
                ->then()
                    ->variable($store->load('posts', $post->id(), $post->version()))
                        ->isNull()
        ;
    }
}
