<?php

/**
 * This file is part of the Cubiche/EventSourcing component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\EventSourcing\Tests\Units\Snapshot\Policy;

use Cubiche\Domain\EventSourcing\Snapshot\InMemorySnapshotStore;
use Cubiche\Domain\EventSourcing\Snapshot\Policy\TimeBasedSnapshottingPolicy;
use Cubiche\Domain\EventSourcing\Snapshot\Snapshot;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourced;
use Cubiche\Domain\EventSourcing\Tests\Fixtures\PostEventSourcedFactory;
use Cubiche\Domain\EventSourcing\Tests\Units\TestCase;

/**
 * TimeBasedSnapshottingPolicyTests class.
 *
 * Generated by TestGenerator on 2016-07-26 at 14:15:46.
 */
class TimeBasedSnapshottingPolicyTests extends TestCase
{
    /**
     * Test ShouldCreateSnapshot method.
     */
    public function testShouldCreateSnapshot()
    {
        $this
            ->given($snapshotStore = new InMemorySnapshotStore())
            ->and($policy = new TimeBasedSnapshottingPolicy($snapshotStore, PostEventSourced::class, '1 hour'))
            ->and(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot($post->id(), $post))
            ->and($snapshot->createdAt()->modify('-2 hours'))
            ->and($snapshotStore->persist($snapshot))
            ->then()
                ->boolean($policy->shouldCreateSnapshot($post))
                    ->isTrue()
                ->and()
                ->when($post->clearMessages())
                ->then()
                    ->boolean($policy->shouldCreateSnapshot($post))
                        ->isFalse()
        ;

        $this
            ->given($snapshotStore = new InMemorySnapshotStore())
            ->and($policy = new TimeBasedSnapshottingPolicy($snapshotStore, PostEventSourced::class, '1 hour'))
            ->and(
                $post = PostEventSourcedFactory::create(
                    $this->faker->sentence,
                    $this->faker->paragraph
                )
            )
            ->and($snapshot = new Snapshot($post->id(), $post))
            ->and($snapshotStore->persist($snapshot))
            ->then()
                ->boolean($policy->shouldCreateSnapshot($post))
                    ->isFalse()
        ;
    }
}
