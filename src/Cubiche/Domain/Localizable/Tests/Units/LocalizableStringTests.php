<?php

/**
 * This file is part of the Cubiche/Localizable component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Domain\Localizable\Tests\Units;

use Cubiche\Domain\Locale\LocaleCode;
use Cubiche\Domain\Localizable\LocalizableString;
use Cubiche\Domain\Localizable\LocalizableValueMode;
use Cubiche\Domain\System\StringLiteral;

/**
 * LocalizableStringTests class.
 *
 * Generated by TestGenerator on 2018-01-15 at 13:40:07.
 */
class LocalizableStringTests extends TestCase
{
    /**
     * Test FromNative method.
     */
    public function testFromNative()
    {
        $this
            ->given($localizableString = LocalizableString::fromNative('Hello world'))
            ->when($constructedLocalizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->and($constructedLocalizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
            ->then()
                ->object($constructedLocalizableString)
                    ->isEqualTo($localizableString)
        ;
    }

    /**
     * Test AddNative method.
     */
    public function testAddNative()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->when($localizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
            ->then()
                ->boolean($localizableString->has(LocaleCode::fromNative('en_US')))
                    ->isTrue()
                ->boolean(
                    $localizableString->value(LocaleCode::fromNative('en_US'))->equals(new StringLiteral('Hello world'))
                )->isTrue()
        ;
    }

    /**
     * Test Add method.
     */
    public function testAdd()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->when($localizableString->add(new StringLiteral('Hello world'), LocaleCode::fromNative('en_US')))
            ->then()
                ->boolean($localizableString->has(LocaleCode::fromNative('en_US')))
                    ->isTrue()
                ->boolean(
                    $localizableString->value(LocaleCode::fromNative('en_US'))->equals(new StringLiteral('Hello world'))
                )->isTrue()
        ;
    }

    /**
     * Test ToNative method.
     */
    public function testToNative()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->when($localizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
            ->then()
                ->string($localizableString->toNative())
                    ->isEqualTo('Hello world')
        ;
    }

    /**
     * Test Equals method.
     */
    public function testEquals()
    {
        $this
            ->given(
                $localizableString = new LocalizableString(LocaleCode::fromNative('en_US')),
                $localizableString->addNative('Hello world', LocaleCode::fromNative('en_US'))
            )
            ->when(
                $localizableString1 = new LocalizableString(LocaleCode::fromNative('en_US')),
                $localizableString1->addNative('Hello world', LocaleCode::fromNative('en_US'))
            )
            ->and(
                $localizableString2 = new LocalizableString(LocaleCode::fromNative('en_US')),
                $localizableString2->addNative('Good bye', LocaleCode::fromNative('en_US'))
            )
            ->and(
                $localizableString3 = new LocalizableString(
                    LocaleCode::fromNative('es_ES'),
                    LocalizableValueMode::STRICT()
                ),
                $localizableString3->addNative('Hello world', LocaleCode::fromNative('en_US'))
            )
            ->then()
                ->boolean($localizableString->equals($localizableString1))
                    ->isTrue()
                ->boolean($localizableString->equals($localizableString2))
                    ->isFalse()
                ->boolean($localizableString->equals($localizableString3))
                    ->isFalse()
        ;
    }

    /**
     * Test __toString method.
     */
    public function testToString()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->then()
                ->string($localizableString->__toString())
                    ->isEqualTo('')
                ->and()
                ->when($localizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
                ->then()
                    ->string($localizableString->__toString())
                        ->isEqualTo('Hello world')
        ;
    }

    /**
     * Test Mode method.
     */
    public function testMode()
    {
        $this
            ->given(
                $localizableString = new LocalizableString(
                    LocaleCode::fromNative('en_US'),
                    LocalizableValueMode::STRICT()
                )
            )
            ->then()
                ->boolean($localizableString->mode()->equals(LocalizableValueMode::STRICT()))
                    ->isTrue()
        ;
    }

    /**
     * Test Mode method.
     */
    public function testStrictMode()
    {
        $this
            ->given(
                $localizableString = new LocalizableString(
                    LocaleCode::fromNative('en_US'),
                    LocalizableValueMode::STRICT()
                )
            )
            ->when($localizableString->addNative('Hola mundo', LocaleCode::fromNative('es_ES')))
            ->then()
                ->variable($localizableString->toNative())
                    ->isNull()
        ;
    }

    /**
     * Test Mode method.
     */
    public function testAnyMode()
    {
        $this
            ->given(
                $localizableString = new LocalizableString(LocaleCode::fromNative('en_US'), LocalizableValueMode::ANY())
            )
            ->when($localizableString->addNative('Hola mundo', LocaleCode::fromNative('es_ES')))
            ->then()
                ->boolean($localizableString->locale()->equals(LocaleCode::fromNative('es_ES')))
                    ->isTrue()
                ->string($localizableString->toNative())
                    ->isEqualTo('Hola mundo')
        ;

        $this
            ->given(
                $localizableString = new LocalizableString(LocaleCode::fromNative('fr_FR'), LocalizableValueMode::ANY())
            )
            ->when($localizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
            ->and($localizableString->addNative('Hola mundo', LocaleCode::fromNative('es_ES')))
            ->then()
                ->boolean($localizableString->locale()->equals(LocaleCode::fromNative('en_US')))
                    ->isTrue()
                ->string($localizableString->toNative())
                    ->isEqualTo('Hello world')
        ;

        $this
            ->given(
                $localizableString = new LocalizableString(LocaleCode::fromNative('fr_FR'), LocalizableValueMode::ANY())
            )
            ->then()
                ->boolean($localizableString->locale()->equals(LocaleCode::fromNative('fr_FR')))
                    ->isTrue()
        ;
    }

    /**
     * Test SetMode method.
     */
    public function testSetMode()
    {
        $this
            ->given(
                $localizableString = new LocalizableString(
                    LocaleCode::fromNative('en_US'),
                    LocalizableValueMode::STRICT()
                )
            )
            ->when($localizableString->setMode(LocalizableValueMode::ANY()))
            ->then()
                ->boolean($localizableString->mode()->equals(LocalizableValueMode::ANY()))
                    ->isTrue()
        ;
    }

    /**
     * Test Locale method.
     */
    public function testLocale()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->then()
                ->boolean($localizableString->locale()->equals(LocaleCode::fromNative('en_US')))
                    ->isTrue()
        ;
    }

    /**
     * Test SetLocale method.
     */
    public function testSetLocale()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->when($localizableString->setLocale(LocaleCode::fromNative('es_ES')))
            ->then()
                ->boolean($localizableString->locale()->equals(LocaleCode::fromNative('es_ES')))
                    ->isTrue()
        ;
    }

    /**
     * Test Remove method.
     */
    public function testRemove()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->when($localizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
            ->then()
                ->boolean($localizableString->has(LocaleCode::fromNative('en_US')))
                    ->isTrue()
                ->and()
                ->when($localizableString->remove(LocaleCode::fromNative('en_US')))
                ->then()
                    ->boolean($localizableString->has(LocaleCode::fromNative('en_US')))
                        ->isFalse()
        ;
    }

    /**
     * Test Has method.
     */
    public function testHas()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->then()
                ->boolean($localizableString->has(LocaleCode::fromNative('en_US')))
                    ->isFalse()
                ->and()
                ->when($localizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
                ->then()
                    ->boolean($localizableString->has(LocaleCode::fromNative('en_US')))
                        ->isTrue()
        ;
    }

    /**
     * Test Translate method.
     */
    public function testTranslate()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->when($localizableString->addNative('Hello world', LocaleCode::fromNative('en_US')))
            ->then()
                ->variable($localizableString->translate(LocaleCode::fromNative('es_ES')))
                    ->isNull()
                ->array($localizableString->translations())
                    ->hasSize(1)
                ->and()
                ->when($localizableString->addNative('Hola mundo', LocaleCode::fromNative('es_ES')))
                ->then()
                    ->array($localizableString->translations())
                        ->hasSize(2)
                    ->string($localizableString->translate(LocaleCode::fromNative('en_US')))
                        ->isEqualTo('Hello world')
                    ->string($localizableString->translate(LocaleCode::fromNative('es_ES')))
                        ->isEqualTo('Hola mundo')
        ;
    }

    /**
     * Test fromArray method.
     */
    public function testFromArray()
    {
        $this
            ->given(
                $localizableString = LocalizableString::fromArray(array('en_US' => 'foo', 'es_ES' => 'fuu'), 'en_US')
            )
            ->then()
                ->boolean($localizableString->locale()->equals(LocaleCode::fromNative('en_US')))
                    ->isTrue()
                ->string($localizableString->translate(LocaleCode::fromNative('en_US')))
                    ->isEqualTo('foo')
                ->string($localizableString->translate(LocaleCode::fromNative('es_ES')))
                    ->isEqualTo('fuu')
        ;
    }

    /**
     * Test toArray method.
     */
    public function testToArray()
    {
        $this
            ->given($localizableString = new LocalizableString(LocaleCode::fromNative('en_US')))
            ->when($localizableString->addNative('foo', LocaleCode::fromNative('en_US')))
            ->and($localizableString->addNative('fuu', LocaleCode::fromNative('es_ES')))
            ->then()
                ->array($localizableString->toArray())
                    ->isEqualTo(array('en_US' => 'foo', 'es_ES' => 'fuu'))
        ;
    }
}
