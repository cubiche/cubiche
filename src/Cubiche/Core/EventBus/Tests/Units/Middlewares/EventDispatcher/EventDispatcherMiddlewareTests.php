<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\EventBus\Tests\Units\Middlewares\EventDispatcher;

use Cubiche\Core\EventBus\Middlewares\EventDispatcher\EventDispatcherMiddleware;
use Cubiche\Core\EventBus\Tests\Fixtures\Event\LoginUserEvent;
use Cubiche\Core\EventBus\Tests\Fixtures\Event\LoginUserEventListener;
use Cubiche\Core\EventBus\Tests\Units\TestCase;
use Cubiche\Core\EventDispatcher\EventDispatcher;

/**
 * EventDispatcherMiddleware class.
 *
 * Generated by TestGenerator on 2016-04-11 at 15:18:25.
 */
class EventDispatcherMiddlewareTests extends TestCase
{
    /**
     * Test Handle method.
     */
    public function testHandle()
    {
        $this
            ->given($dispatcher = new EventDispatcher())
            ->and($middleware = new EventDispatcherMiddleware($dispatcher))
            ->and($event = new LoginUserEvent('ivan@cubiche.com'))
            ->and($dispatcher->addListener($event->messageName(), array(new LoginUserEventListener(), 'loginUser')))
            ->and($dispatcher->addListener($event->messageName(), function (LoginUserEvent $event) {
                $this
                    ->string($event->email())
                    ->isEqualTo('info@cubiche.org')
                ;

                $event->setEmail('fake@email.com');
            }))
            ->and($callable = function (LoginUserEvent $event) {
                $event->setEmail('callback@email.com');
            })
            ->when($result = $middleware->handle($event, $callable))
            ->then()
                ->string($event->email())
                    ->isEqualTo('callback@email.com')
                ->exception(function () use ($middleware, $callable) {
                    $middleware->handle(new \StdClass(), $callable);
                })->isInstanceOf(\InvalidArgumentException::class)
        ;
    }

    /**
     * Test dispatcher method.
     */
    public function testDispatcher()
    {
        $this
            ->given($dispatcher = new EventDispatcher())
            ->and($middleware = new EventDispatcherMiddleware($dispatcher))
            ->when($result = $middleware->dispatcher())
            ->then()
                ->object($result)
                    ->isEqualTo($dispatcher)
        ;
    }
}
