<?php

/**
 * This file is part of the Cubiche/Command component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\CommandBus\Tests\Units\Middlewares\Handler;

use Cubiche\Core\CommandBus\Middlewares\Handler\HandlerMiddleware;
use Cubiche\Core\CommandBus\Middlewares\Handler\Locator\InMemoryLocator;
use Cubiche\Core\CommandBus\Middlewares\Handler\Resolver\CommandName\DefaultResolver as CommandNameDefaultResolver;
use Cubiche\Core\CommandBus\Middlewares\Handler\Resolver\HandlerClass\Resolver as HandlerClassResolver;
use Cubiche\Core\CommandBus\Middlewares\Handler\Resolver\MethodName\DefaultResolver as MethodNameDefaultResolver;
use Cubiche\Core\CommandBus\Tests\Fixtures\LoginUserCommand;
use Cubiche\Core\CommandBus\Tests\Fixtures\LoginUserCommandHandler;
use Cubiche\Core\CommandBus\Tests\Units\TestCase;

/**
 * HandlerMiddleware class.
 *
 * Generated by TestGenerator on 2016-04-07 at 15:40:41.
 */
class HandlerMiddlewareTests extends TestCase
{
    /**
     * Test Execute method.
     */
    public function testExecute()
    {
        $this
            ->given(
                $resolver = new HandlerClassResolver(
                    new CommandNameDefaultResolver(),
                    new MethodNameDefaultResolver(),
                    [new InMemoryLocator([LoginUserCommand::class => new LoginUserCommandHandler()])]
                )
            )
            ->and($middleware = new HandlerMiddleware($resolver))
            ->and($command = new LoginUserCommand('ivan@cubiche.com', 'plainpassword'))
            ->and($callable = function (LoginUserCommand $command) {
                $command->setEmail('info@cubiche.org');
            })
            ->when($middleware->execute($command, $callable))
            ->then()
                ->string($command->email())
                    ->isEqualTo('info@cubiche.org')
        ;
    }
}
