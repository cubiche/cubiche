<?php

/**
 * This file is part of the Cubiche/Command component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Core\CommandBus\Tests\Units\Middlewares\Handler\Resolver\MethodName;

use Cubiche\Core\CommandBus\Exception\InvalidResolverException;
use Cubiche\Core\CommandBus\Exception\NotFoundException;
use Cubiche\Core\CommandBus\Middlewares\Handler\Resolver\MethodName\ChainResolver;
use Cubiche\Core\CommandBus\Middlewares\Handler\Resolver\MethodName\DefaultResolver;
use Cubiche\Core\CommandBus\Middlewares\Handler\Resolver\MethodName\MethodWithShortCommandNameResolver;
use Cubiche\Core\CommandBus\Tests\Fixtures\InvalidMethodNameResolver;
use Cubiche\Core\CommandBus\Tests\Fixtures\LoginUserCommand;
use Cubiche\Core\CommandBus\Tests\Fixtures\LogoutUserCommand;
use Cubiche\Core\CommandBus\Tests\Units\TestCase;

/**
 * ChainResolver class.
 *
 * Generated by TestGenerator on 2016-04-07 at 15:40:41.
 */
class ChainResolverTests extends TestCase
{
    /**
     * Test create.
     */
    public function testCreate()
    {
        $this
            ->given($resolver1 = new \StdClass())
            ->then()
            ->exception(function () use ($resolver1) {
                new ChainResolver([$resolver1]);
            })
            ->isInstanceOf(InvalidResolverException::class)
        ;
    }

    /**
     * Test Resolve method.
     */
    public function testResolve()
    {
        $this
            ->given($resolver1 = new InvalidMethodNameResolver())
            ->and($resolver2 = new MethodWithShortCommandNameResolver())
            ->and($resolver3 = new DefaultResolver())
            ->and($resolver = new ChainResolver([$resolver1, $resolver2, $resolver3]))
            ->when($result = $resolver->resolve(new LoginUserCommand('ivan@cubiche.com', 'plainpassword')))
            ->then()
                ->string($result)
                    ->isEqualTo('handleLoginUser')
        ;

        $this
            ->given($resolver = new ChainResolver([]))
            ->then()
            ->exception(function () use ($resolver) {
                $resolver->resolve(new LogoutUserCommand('ivan@cubiche.com'));
            })
            ->isInstanceOf(NotFoundException::class)
        ;
    }
}
