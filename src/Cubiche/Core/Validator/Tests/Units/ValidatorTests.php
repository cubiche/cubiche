<?php

/**
 * This file is part of the Cubiche/Validator component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Core\Validator\Tests\Units;

use Cubiche\Core\Validator\Assert;
use Cubiche\Core\Validator\Exception\ValidationException;
use Cubiche\Core\Validator\Validator;
use Cubiche\Core\Validator\ValidatorInterface;

/**
 * ValidatorTests class.
 *
 * Generated by TestGenerator on 2016-05-18 at 15:26:52.
 */
class ValidatorTests extends TestCase
{
    /**
     * Test create method.
     */
    public function testCreate()
    {
        $this
            ->given($validator = Validator::create())
            ->then()
                ->object($validator)
                    ->isInstanceOf(ValidatorInterface::class)
        ;
    }

    /**
     * Test constraints method.
     */
    public function testConstraints()
    {
        $this
            ->given($validator = Validator::create())
            ->and($validator->addConstraint(Assert::alnum()->notBlank()))
            ->then()
                ->array($validator->constraints()->getRules())
                    ->hasSize(2)
        ;
    }

    /**
     * Test assert method.
     */
    public function testAssert()
    {
        $this
            ->given($validator = Validator::create())
            ->and($validator->addConstraint(Assert::alnum()->noWhitespace()->length(1, 15)))
            ->then()
                ->boolean($validator->assert('ivannis'))
                    ->isTrue()
                ->exception(function () use ($validator) {
                    $validator->assert('some tests');
                })->isInstanceOf(ValidationException::class)
        ;
    }

    /**
     * Test validate method.
     */
    public function testValidate()
    {
        $this
            ->given($validator = Validator::create())
            ->and($validator->addConstraint(Assert::alnum()->noWhitespace()->length(4, 15)))
            ->then()
                ->boolean($validator->validate('ivannis'))
                    ->isTrue()
                ->boolean($validator->validate(17))
                    ->isFalse()
        ;
    }
}
