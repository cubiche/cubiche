<?php

/**
 * This file is part of the Cubiche/Validator component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Core\Validator\Tests\Units;

use Cubiche\Core\Validator\Assert;
use Cubiche\Core\Validator\Exception\ValidationException;
use Cubiche\Core\Validator\Mapping\Driver\StaticDriver;
use Cubiche\Core\Validator\Tests\Fixtures\Blog;
use Cubiche\Core\Validator\Tests\Fixtures\Post;
use Cubiche\Core\Validator\Validator;
use Cubiche\Core\Validator\ValidatorInterface;
use Metadata\Driver\DriverChain;
use Metadata\MetadataFactory;

/**
 * ValidatorTests class.
 *
 * Generated by TestGenerator on 2016-05-18 at 15:26:52.
 */
class ValidatorTests extends TestCase
{
    /**
     * @return Validator
     */
    public function creaateValidator()
    {
        return Validator::create();
    }

    /**
     * Test create method.
     */
    public function testCreate()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->then()
                ->object($validator)
                    ->isInstanceOf(ValidatorInterface::class)
        ;
    }

    /**
     * Test setDefaultGroup method.
     */
    public function testSetDefaultGroup()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->when($validator->setDefaultGroup('foo'))
            ->then()
                ->boolean(true)
                    ->isTrue()
        ;
    }

    /**
     * Test setMetadataFactory method.
     */
    public function testSetMetadataFactory()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->and($metadataFactory = new MetadataFactory(new DriverChain(array(new StaticDriver()))))
            ->when($validator->setMetadataFactory($metadataFactory))
            ->then()
                ->boolean(true)
                    ->isTrue()
        ;
    }

    /**
     * Test assert method.
     */
    public function testAssertExplicitConstraints()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->then()
                ->boolean($validator->assert('ivannis', Assert::alnum()->noWhitespace()->length(1, 15)))
                    ->isTrue()
                ->boolean($validator->assert('ivannis', Assert::alnum()->noWhitespace()->length(1, 15), 'foo'))
                    ->isTrue()
                ->exception(function () use ($validator) {
                    $validator->assert('some tests', Assert::alnum()->noWhitespace()->length(1, 15));
                })->isInstanceOf(ValidationException::class)
                ->exception(function () use ($validator) {
                    $validator->assert('value');
                })->isInstanceOf(\RuntimeException::class)
        ;
    }

    /**
     * Test assert method.
     */
    public function testAssertObject()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->and($post = new Post('title', 'some content'))
            ->and($post1 = new Post())
            ->and($post2 = new Post(3, 10))
            ->and($blog = new Blog())
            ->then()
                ->boolean($validator->assert($post))
                    ->isTrue()
                ->boolean($validator->assert($post, null, 'bar'))
                    ->isTrue()
                ->exception(function () use ($validator, $post1) {
                    $validator->assert($post1);
                })->isInstanceOf(ValidationException::class)
                ->exception(function () use ($validator, $post2) {
                    $validator->assert($post2);
                })->isInstanceOf(ValidationException::class)
                ->boolean($validator->assert($post2, null, 'foo'))
                    ->isTrue()
                ->boolean($validator->assert($blog))
                    ->isTrue()
                ->boolean($validator->assert($blog, null, 'foo'))
                    ->isTrue()
        ;
    }

    /**
     * Test assert method.
     */
    public function testAssertArrayObject()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->and($post = new Post('title', 'some content'))
            ->and($post1 = new Post())
            ->and($post2 = new Post(3, 10))
            ->and($blog = new Blog())
            ->and($blog1 = new Blog())
            ->then()
                ->boolean($validator->assert([$post, [$blog, $blog1]]))
                    ->isTrue()
                ->boolean($validator->assert([$post, $blog], null, 'bar'))
                    ->isTrue()
                ->exception(function () use ($validator, $post1, $blog) {
                    $validator->assert([$post1, $blog, 300]);
                })->isInstanceOf(\RuntimeException::class)
                ->exception(function () use ($validator, $post1, $blog) {
                    $validator->assert([$post1, $blog]);
                })->isInstanceOf(ValidationException::class)
                ->exception(function () use ($validator, $post2, $blog) {
                    $validator->assert([$post2, $blog]);
                })->isInstanceOf(ValidationException::class)
                ->boolean($validator->assert([$post2, $blog], null, 'foo'))
                    ->isTrue()
        ;
    }

    /**
     * Test validate method.
     */
    public function testValidateExplicitConstraints()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->then()
                ->boolean($validator->validate('ivannis', Assert::alnum()->noWhitespace()->length(1, 15)))
                    ->isTrue()
                ->boolean($validator->validate('ivannis', Assert::alnum()->noWhitespace()->length(1, 15), 'foo'))
                    ->isTrue()
                ->boolean($validator->validate('some tests', Assert::alnum()->noWhitespace()->length(1, 15)))
                    ->isFalse()
                ->exception(function () use ($validator) {
                    $validator->validate('value');
                })->isInstanceOf(\RuntimeException::class)
        ;
    }

    /**
     * Test validate method.
     */
    public function testValidateObject()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->and($post = new Post('title', 'some content'))
            ->and($post1 = new Post())
            ->and($post2 = new Post(3, 10))
            ->and($blog = new Blog())
            ->then()
                ->boolean($validator->validate($post))
                    ->isTrue()
                ->boolean($validator->validate($post, null, 'bar'))
                    ->isTrue()
                ->boolean($validator->validate($post1))
                    ->isFalse()
                ->boolean($validator->validate($post2))
                    ->isFalse()
                ->boolean($validator->validate($post2, null, 'foo'))
                    ->isTrue()
                ->boolean($validator->validate($blog))
                    ->isTrue()
                ->boolean($validator->validate($blog, null, 'foo'))
                    ->isTrue()
        ;
    }

    /**
     * Test validate method.
     */
    public function testValidateArrayObject()
    {
        $this
            ->given($validator = $this->creaateValidator())
            ->and($post = new Post('title', 'some content'))
            ->and($post1 = new Post())
            ->and($post2 = new Post(3, 10))
            ->and($blog = new Blog())
            ->and($blog1 = new Blog())
            ->then()
                ->boolean($validator->validate([$post, [$blog, $blog1]]))
                    ->isTrue()
                ->boolean($validator->validate([$post, $blog], null, 'bar'))
                    ->isTrue()
                ->exception(function () use ($validator, $post1, $blog) {
                    $validator->validate([$post1, $blog, 300]);
                })->isInstanceOf(\RuntimeException::class)
                ->boolean($validator->validate([$post1, $blog]))
                    ->isFalse()
                ->boolean($validator->validate([$post2, $blog]))
                    ->isFalse()
                ->boolean($validator->validate([$post2, $blog], null, 'foo'))
                    ->isTrue()
        ;
    }
}
