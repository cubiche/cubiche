<?php

/**
 * This file is part of the Cubiche/Validator component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Validator\Tests\Units;

use Cubiche\Core\Validator\Exception\InvalidArgumentException;
use Cubiche\Core\Validator\Rules\Group\AllOf;
use Cubiche\Core\Validator\Rules\Common\NotBlank;
use Cubiche\Core\Validator\Visitor\Asserter;
use Cubiche\Core\Validator\Assertion;
use Cubiche\Core\Validator\Exception\InvalidArgumentsException;
use Cubiche\Core\Validator\Rules\String\StringType;
use Cubiche\Core\Validator\Tests\Fixtures\Post;

/**
 * AssertionTests class.
 *
 * Generated by TestGenerator on 2016-05-18 at 15:26:52.
 */
class AssertionTests extends TestCase
{
    /**
     * Test validate method.
     */
    public function testValidate()
    {
        $this
            ->given($post = new Post('some title 12'))
            ->and($titleValidator = Assertion::property('title', Assertion::stringType()->notBlank()))
            ->and(
                $complexValidator = Assertion::allOf(
                    Assertion::property('content', Assertion::stringType()->notBlank()),
                    Assertion::property('age', Assertion::integerType()->greaterThan(16)),
                    Assertion::method('title', Assertion::alpha()),
                    Assertion::method('title', Assertion::stringType()->contains('hello')),
                    Assertion::method('foo', Assertion::floatType())
                )
            )
            ->then()
                ->boolean($titleValidator->validate($post))
                    ->isTrue()
                ->boolean($complexValidator->validate($post))
                    ->isFalse()
        ;
    }

    /**
     * Test assert method.
     */
    public function testAssert()
    {
        $this
            ->given($post = new Post('some title'))
            ->and($simpleValidator = Assertion::property('title', Assertion::stringType()->notBlank()))
            ->and(
                $allOfValidator = Assertion::allOf(
                    Assertion::property('content', Assertion::stringType()->notBlank()),
                    Assertion::property('age', Assertion::integerType()->greaterThan(16)),
                    Assertion::method('title', Assertion::stringType()->contains('hello')),
                    Assertion::method('foo', Assertion::floatType())
                )
            )
            ->and(
                $oneOfValidator = Assertion::oneOf(
                    Assertion::method('title', Assertion::stringType()->contains('hello')),
                    Assertion::method('foo', Assertion::floatType()),
                    Assertion::property('content', Assertion::stringType()->notBlank())
                )
            )
            ->and(
                $noneOfValidator = Assertion::noneOf(
                    Assertion::method('title', Assertion::stringType()->contains('title')),
                    Assertion::method('foo', Assertion::floatType()),
                    Assertion::property('content', Assertion::stringType()->notBlank()),
                    Assertion::property('content', Assertion::integerType()->greaterThan(16))
                )
            )
            ->and(
                $complexValidator = Assertion::oneOf(
                    Assertion::method('title', Assertion::stringType()->contains('title')),
                    Assertion::method('foo', Assertion::floatType()),
                    Assertion::property('content', Assertion::integerType()->greaterThan(16))
                ),
                $complexValidator->addRules(
                    Assertion::property('title', Assertion::stringType()->contains('some'))->rules()
                ),
                $complexValidator->addRules(
                    Assertion::property('content', Assertion::nullOrStringType())->rules()
                ),
                $complexValidator->addRules(
                    Assertion::property('comments', Assertion::allNullType())->rules()
                )
            )
            ->then()
                ->boolean($simpleValidator->assert($post))
                    ->isTrue()
                ->boolean($complexValidator->assert($post))
                    ->isTrue()
                ->exception(function () use ($allOfValidator, $post) {
                    $allOfValidator->assert($post);
                })->isInstanceOf(InvalidArgumentsException::class)
                ->exception(function () use ($oneOfValidator, $post) {
                    $oneOfValidator->assert($post);
                })->isInstanceOf(InvalidArgumentsException::class)
                ->exception(function () use ($noneOfValidator, $post) {
                    $noneOfValidator->assert($post);
                })->isInstanceOf(InvalidArgumentsException::class)
        ;
    }

    /**
     * Test assert method.
     */
    public function testAsserter()
    {
        $this
            ->given($rule = new AllOf(new StringType(), new NotBlank()))
            ->and($assertionChain = Assertion::stringType()->notBlank())
            ->and(
                $assertionObject = Assertion::allOf(
                    Assertion::property('title', Assertion::stringType()->notBlank()),
                    Assertion::method('title', Assertion::stringType()->notBlank()),
                    Assertion::property('content', Assertion::integerType()->lessThan(20))
                )
            )
            ->and($asserter = new Asserter())
            ->then()
                ->boolean($rule->accept($asserter, 'some title'))
                    ->isTrue()
                ->boolean($assertionChain->assert('some title'))
                    ->isTrue()
                ->boolean($assertionObject->assert(new Post('test', 16)))
                    ->isTrue()
        ;
    }

    /**
     * Test registerAsserter method.
     */
    public function testRegisterAsserter()
    {
        $this
            ->given(
                $assertion = Assertion::allOf(
                    Assertion::property('title', Assertion::stringType()->notBlank()),
                    Assertion::method('title', Assertion::stringType()->notBlank()),
                    Assertion::property('content', Assertion::integerType()->lessThan(20))
                )
            )
            ->and($post = new Post('test', 16))
            ->then()
                ->boolean($assertion->validate($post))
                    ->isTrue()
                ->exception(function () use ($assertion) {
                    $assertion->addRule(Assertion::property('content', Assertion::uniqueName()));
                })->isInstanceOf(\LogicException::class)
                ->and()
                ->when(Assertion::registerAssert('uniqueName', function ($value, $message = null, $propertyPath = null) {
                    throw new InvalidArgumentException('Title must be unique', 0, 'title', $value);
                }))
                ->and($assertion->addRule(Assertion::property('content', Assertion::uniqueName())))
                ->then()
                    ->boolean($assertion->validate($post))
                        ->isFalse()
                    ->exception(function () use ($assertion) {
                        Assertion::getAssert('foo');
                    })->isInstanceOf(\LogicException::class)
        ;
    }
}
