<?php

/**
 * This file is part of the Cubiche/Validator component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Validator\Tests\Units;

use Cubiche\Core\Validator\Assertion;
use Cubiche\Core\Validator\Exception\InvalidArgumentException;
use Cubiche\Core\Validator\Tests\Fixtures\Assert;
use Cubiche\Core\Validator\Tests\Fixtures\Post;

/**
 * AssertionTests class.
 *
 * Generated by TestGenerator on 2016-05-18 at 15:26:52.
 */
class AssertionTests extends TestCase
{
    use TestProviderTrait;

    /**
     * Test provider.
     */
    public function getTestsChain()
    {
        return array(
            '1' => array(Assertion::boolean()->false(), array(false), true),
            '2' => array(Assertion::numeric()->greaterThan(0), array(0), false),
            '3' => array(Assertion::string()->isEmpty(), array(''), true),
            '4' => array(Assertion::false()->alwaysInvalid(), array(false), false),
            '5' => array(
                Assertion::property('title', Assertion::string()->notBlank()),
                array(new Post('The lord of the rings')),
                true,
            ),
            '6' => array(
                Assertion::allOf(
                    Assertion::property('content', Assertion::string()->notBlank()),
                    Assertion::property('age', Assertion::integer()->greaterThan(16)),
                    Assertion::method('title', Assertion::string()->contains('hello')),
                    Assertion::method('foo', Assertion::float())
                ),
                array(new Post('The walking dead')),
                false,
            ),
            '7' => array(
                Assertion::oneOf(
                    Assertion::method('title', Assertion::string()->contains('walking')),
                    Assertion::method('foo', Assertion::float()),
                    Assertion::property('content', Assertion::string()->notBlank())
                ),
                array(new Post('The walking dead')),
                true,
            ),
            '8' => array(
                Assertion::noneOf(
                    Assertion::method('title', Assertion::string()->contains('The')),
                    Assertion::method('foo', Assertion::float()),
                    Assertion::property('content', Assertion::string()->notBlank()),
                    Assertion::property('content', Assertion::integer()->greaterThan(16))
                ),
                array(new Post('The walking dead')),
                false,
            ),
            '9' => array(
                Assertion::allOf(
                    Assertion::property('title', Assertion::string()->notBlank()),
                    Assertion::method('title', Assertion::string()->notBlank()),
                    Assertion::property('content', Assertion::integer()->lessThan(20)),
                    Assertion::property('comments', Assertion::allNull())
                ),
                array(new Post('Games of thrones', 16)),
                true,
            ),
            '10' => array(
                Assertion::allOf(
                    Assertion::property('title', Assertion::string()->notBlank()),
                    Assertion::method('content', Assertion::string()->notBlank()),
                    Assertion::property(
                        'comments',
                        Assertion::isArray()->allEach(
                            Assertion::string()->notBlank()->inArray(array('en_US', 'es_ES')),
                            Assertion::string()->notBlank()
                        )
                    )
                ),
                array(
                    new Post(
                        'Games of thrones',
                        'Game of Thrones is a television series created by David Benioff and D. B',
                        array(
                            array(
                                'en_US' => 'A great American fantasy drama television serie',
                                'es_ES' => 'Una gran serie de televisión de drama de fantasía estadounidense',
                            ),
                            array(
                                'en_US' => 'I had very high expectations from this series',
                                'es_ES' => 'Tenía muchas expectativas de esta serie',
                            ),
                        )
                    ),
                ),
                true,
            ),
            '11' => array(
                Assertion::allOf(
                    Assertion::isArray()->keyIsset('en_US'),
                    Assertion::isArray()->notEmptyKey('es_ES')
                ),
                array(
                    array(
                        'en_US' => 'I had very high expectations from this series',
                        'es_ES' => 'Tenía muchas expectativas de esta serie',
                    ),
                ),
                true,
            ),
        );
    }

    /**
     * @dataProvider getTests
     */
    public function testValidate($method, $arguments, $success, $multibyte = false, $minVersion = null)
    {
        if ($minVersion && PHP_VERSION_ID < $minVersion) {
            $this->markTestSkipped(sprintf('This test requires php %s or upper.', $minVersion));

            return;
        }

        if ($multibyte && !function_exists('mb_strlen')) {
            $this->markTestSkipped('The function mb_strlen() is not available');
        }

        $arg = array_shift($arguments);

        if (!$success) {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, $method), $arguments))
                ->then()
                    ->boolean(call_user_func_array(array($assertion, 'validate'), array($arg)))
                        ->isFalse()
            ;
        } else {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, $method), $arguments))
                ->then()
                    ->boolean(call_user_func_array(array($assertion, 'validate'), array($arg)))
                        ->isTrue()
            ;
        }
    }

    /**
     * @dataProvider getTests
     */
    public function testAssert($method, $arguments, $success, $multibyte = false, $minVersion = null)
    {
        if ($minVersion && PHP_VERSION_ID < $minVersion) {
            $this->markTestSkipped(sprintf('This test requires php %s or upper.', $minVersion));

            return;
        }

        if ($multibyte && !function_exists('mb_strlen')) {
            $this->markTestSkipped('The function mb_strlen() is not available');
        }

        $arg = array_shift($arguments);

        if (!$success) {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, $method), $arguments))
                ->then()
                    ->exception(function () use ($assertion, $arg) {
                        call_user_func_array(array($assertion, 'assert'), array($arg));
                    })->isInstanceOf(InvalidArgumentException::class)
            ;
        } else {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, $method), $arguments))
                ->then()
                    ->boolean(call_user_func_array(array($assertion, 'assert'), array($arg)))
                        ->isTrue()
            ;
        }
    }

    /**
     * @dataProvider getTests
     */
    public function testNullOr($method, $arguments, $success, $multibyte = false, $minVersion = null)
    {
        if ($minVersion && PHP_VERSION_ID < $minVersion) {
            $this->markTestSkipped(sprintf('This test requires php %s or upper.', $minVersion));

            return;
        }

        if ($multibyte && !function_exists('mb_strlen')) {
            $this->markTestSkipped('The function mb_strlen() is not available');
        }

        $arg = array_shift($arguments);

        if (null === $arg) {
            return;
        }

        if (!$success) {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, 'nullOr'.ucfirst($method)), $arguments))
                ->then()
                ->exception(function () use ($assertion, $arg) {
                    call_user_func_array(array($assertion, 'assert'), array($arg));
                })->isInstanceOf(InvalidArgumentException::class)
            ;
        } else {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, 'nullOr'.ucfirst($method)), $arguments))
                ->then()
                    ->boolean(call_user_func_array(array($assertion, 'assert'), array($arg)))
                        ->isTrue()
            ;
        }
    }

    /**
     * @dataProvider getTests
     */
    public function testAllArray($method, $arguments, $success, $multibyte = false, $minVersion = null)
    {
        if ($minVersion && PHP_VERSION_ID < $minVersion) {
            $this->markTestSkipped(sprintf('This test requires php %s or upper.', $minVersion));

            return;
        }

        if ($multibyte && !function_exists('mb_strlen')) {
            $this->markTestSkipped('The function mb_strlen() is not available');
        }

        $arg = array_shift($arguments);

        if (!$success) {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, 'all'.ucfirst($method)), $arguments))
                ->then()
                ->exception(function () use ($assertion, $arg) {
                    call_user_func_array(array($assertion, 'assert'), array(array($arg)));
                })->isInstanceOf(InvalidArgumentException::class)
            ;
        } else {
            $this
                ->given($assertion = call_user_func_array(array(Assertion::class, 'all'.ucfirst($method)), $arguments))
                ->then()
                    ->boolean(call_user_func_array(array($assertion, 'assert'), array(array($arg))))
                        ->isTrue()
            ;
        }
    }

    /**
     * @dataProvider getTestsChain
     */
    public function testValidateChain($assertion, $arguments, $success, $multibyte = false, $minVersion = null)
    {
        if ($minVersion && PHP_VERSION_ID < $minVersion) {
            $this->markTestSkipped(sprintf('This test requires php %s or upper.', $minVersion));

            return;
        }

        if ($multibyte && !function_exists('mb_strlen')) {
            $this->markTestSkipped('The function mb_strlen() is not available');
        }

        $arg = array_shift($arguments);

        if (!$success) {
            $this
                ->boolean(call_user_func_array(array($assertion, 'validate'), array($arg)))
                    ->isFalse()
            ;
        } else {
            $this
                ->boolean(call_user_func_array(array($assertion, 'validate'), array($arg)))
                    ->isTrue()
            ;
        }
    }

    /**
     * @dataProvider getTestsChain
     */
    public function testAssertChain($assertion, $arguments, $success, $multibyte = false, $minVersion = null)
    {
        if ($minVersion && PHP_VERSION_ID < $minVersion) {
            $this->markTestSkipped(sprintf('This test requires php %s or upper.', $minVersion));

            return;
        }

        if ($multibyte && !function_exists('mb_strlen')) {
            $this->markTestSkipped('The function mb_strlen() is not available');
        }

        $arg = array_shift($arguments);

        if (!$success) {
            $this
                ->exception(function () use ($assertion, $arg) {
                    call_user_func_array(array($assertion, 'assert'), array($arg));
                })->isInstanceOf(InvalidArgumentException::class)
            ;
        } else {
            $this
                ->boolean(call_user_func_array(array($assertion, 'assert'), array($arg)))
                    ->isTrue()
            ;
        }
    }

    /**
     * Test registerAssert method.
     */
    public function testRegisterAssert()
    {
        $this
            ->given(
                $assertion = Assertion::allOf(
                    Assertion::property('title', Assertion::string()->notBlank()),
                    Assertion::method('title', Assertion::string()->notBlank()),
                    Assertion::property('content', Assertion::integer()->lessThan(20))
                )
            )
            ->and($post = new Post('test', 16))
            ->then()
                ->boolean($assertion->validate($post))
                    ->isTrue()
                ->exception(function () use ($assertion) {
                    $assertion->addRule(Assertion::property('content', Assertion::uniqueName()));
                })->isInstanceOf(\LogicException::class)
                ->and()
                ->when(Assertion::registerAssert('uniqueName', function ($value, $message = null, $propertyPath = null) {
                    throw new InvalidArgumentException('Title must be unique', 0, 'title', $value);
                }))
                ->and($assertion->addRule(Assertion::property('content', Assertion::uniqueName())))
                ->then()
                    ->boolean($assertion->validate($post))
                        ->isFalse()
                    ->exception(function () use ($assertion) {
                        Assertion::getAssert('foo');
                    })->isInstanceOf(\LogicException::class)
        ;
    }

    /**
     * Test registerAssert method.
     */
    public function testRegisterAssertClass()
    {
        $this
            ->given(
                $assertion = Assertion::allOf(
                    Assertion::property('title', Assertion::string()->notBlank()),
                    Assertion::method('title', Assertion::string()->notBlank()),
                    Assertion::property('content', Assertion::integer()->lessThan(20))
                )
            )
            ->and($asserter = new Assert())
            ->and($post = new Post('test', 16))
            ->then()
                ->boolean($assertion->validate($post))
                    ->isTrue()
                ->exception(function () use ($assertion) {
                    $assertion->addRule(Assertion::property('content', Assertion::uniqueId()));
                })->isInstanceOf(\LogicException::class)
                ->and()
                ->when(Assertion::registerAssert('uniqueId', array($asserter, 'uniqueId')))
                ->and($assertion->addRule(Assertion::property('content', Assertion::uniqueId())))
                ->then()
                    ->boolean($assertion->validate($post))
                        ->isFalse()
                ->exception(function () use ($assertion) {
                    $assertion->addRule(Assertion::property('content', Assertion::uniqueEmail()));
                })->isInstanceOf(\LogicException::class)
                ->and()
                ->when(Assertion::registerAssert('uniqueEmail', array($asserter, 'uniqueEmail')))
                ->and($assertion->addRule(Assertion::property('content', Assertion::uniqueEmail())))
                ->then()
                    ->boolean($assertion->validate($post))
                        ->isFalse()
        ;
    }
}
