<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Bus\Tests\Units\Handler\Resolver;

use Cubiche\Core\Bus\Exception\NotFoundException;
use Cubiche\Core\Bus\Handler\Locator\InMemoryLocator;
use Cubiche\Core\Bus\Handler\MethodName\ShortNameFromClassResolver;
use Cubiche\Core\Bus\Handler\Resolver\MessageHandlerResolver;
use Cubiche\Core\Bus\Message\Resolver\ClassBasedNameResolver;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LoginUserMessage;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LoginUserMessageListener;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LogoutUserMessage;
use Cubiche\Core\Bus\Tests\Units\TestCase;

/**
 * MessageHandlerResolver class.
 *
 * Generated by TestGenerator on 2016-04-07 at 15:40:41.
 */
class MessageHandlerResolverTests extends TestCase
{
    /**
     * Test Resolve method.
     */
    public function testResolve()
    {
        $this
            ->given(
                $resolver = new MessageHandlerResolver(
                    new ClassBasedNameResolver(),
                    new ShortNameFromClassResolver(),
                    new InMemoryLocator([
                        LoginUserMessage::class => new LoginUserMessageListener()
                    ])
                )
            )
            ->when($result = $resolver->resolve(new LoginUserMessage('ivan@cubiche.com')))
            ->then()
                ->variable($result)
                    ->isCallable()
        ;

        $this
            ->given(
                $resolver = new MessageHandlerResolver(
                    new ClassBasedNameResolver(),
                    new ShortNameFromClassResolver(),
                    new InMemoryLocator([
                        LoginUserMessage::class => new LoginUserMessageListener()
                    ])
                )
            )
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LogoutUserMessage('ivan@cubiche.com'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;

        $this
            ->given(
                $resolver = new MessageHandlerResolver(
                    new ClassBasedNameResolver(),
                    new ShortNameFromClassResolver(['Command']),
                    new InMemoryLocator([LoginUserMessage::class => new LoginUserMessageListener()])
                )
            )
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LoginUserMessage('ivan@cubiche.com'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }
}
