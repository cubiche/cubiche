<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Bus\Tests\Units\Handler\Locator;

use Cubiche\Core\Bus\Exception\NotFoundException;
use Cubiche\Core\Bus\Handler\Locator\HandlerLocatorInterface;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LoginUserMessage;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LoginUserMessageListener;
use Cubiche\Core\Bus\Tests\Units\TestCase;

/**
 * LocatorTestCase class.
 *
 * Generated by TestGenerator on 2016-04-07 at 15:40:41.
 */
abstract class HandlerLocatorTestCase extends TestCase
{
    /**
     * @return HandlerLocatorInterface
     */
    abstract protected function createHandlerLocator();

    /**
     * Test create.
     */
    public function testCreate()
    {
        $this
            ->given($locator = $this->createHandlerLocator())
            ->then()
                ->object($locator)
                    ->isInstanceOf(HandlerLocatorInterface::class)
        ;
    }

    /**
     * Test Locate method.
     */
    public function testLocate()
    {
        $this
            ->given($handler = new LoginUserMessageListener())
            ->and($locator = $this->createHandlerLocator())
            ->when($locator->addHandler(LoginUserMessage::class, $handler))
            ->then()
                ->object($locator->locate(LoginUserMessage::class))
                    ->isEqualTo($handler)
                ->and()
                ->exception(function () use ($locator) {
                    $locator->locate('Foo');
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }
}
