<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Core\Bus\Tests\Units\Middlewares\Handler\Locator;

use Cubiche\Core\Bus\Exception\NotFoundException;
use Cubiche\Core\Bus\Middlewares\Handler\Locator\InMemoryLocator;
use Cubiche\Core\Bus\Middlewares\Handler\Locator\LocatorInterface;
use Cubiche\Core\Bus\Tests\Fixtures\Event\LoginUserEvent;
use Cubiche\Core\Bus\Tests\Fixtures\Event\LoginUserEventListener;
use Cubiche\Core\Bus\Tests\Units\TestCase;

/**
 * InMemoryLocator class.
 *
 * Generated by TestGenerator on 2016-04-07 at 15:40:41.
 */
class InMemoryLocatorTests extends TestCase
{
    /**
     * Test Add method.
     */
    public function testAdd()
    {
        $this
            ->given($handler = new LoginUserEventListener())
            ->then()
                ->object($locator = new InMemoryLocator([LoginUserEvent::class => $handler]))
                    ->isInstanceOf(LocatorInterface::class)
        ;

        $this
            ->given($handler = new LoginUserEventListener())
            ->then()
                ->exception(function () use ($handler) {
                    new InMemoryLocator([255 => $handler]);
                })
                ->isInstanceOf(\InvalidArgumentException::class)
                ->exception(function () use ($handler) {
                    new InMemoryLocator([LoginUserEvent::class => 255]);
                })
                ->isInstanceOf(\InvalidArgumentException::class)

        ;
    }

    /**
     * Test Locate method.
     */
    public function testLocate()
    {
        $this
            ->given($handler = new LoginUserEventListener())
            ->and($locator = new InMemoryLocator([LoginUserEvent::class => $handler]))
            ->when($result = $locator->locate(LoginUserEvent::class))
            ->then()
                ->object($result)
                    ->isEqualTo($handler)
                ->exception(function () use ($locator) {
                    $locator->locate('Foo');
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }
}
