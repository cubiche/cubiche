<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Bus\Tests\Units\Middlewares\Handler\Resolver\HandlerMethodName;

use Cubiche\Core\Bus\Exception\NotFoundException;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerMethodName\ChainResolver;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerMethodName\DefaultResolver;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerMethodName\MethodWithShortObjectNameAndSuffixResolver;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerMethodName\MethodWithShortObjectNameResolver;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LoginUserMessage;
use Cubiche\Core\Bus\Tests\Fixtures\Message\LogoutUserMessage;
use Cubiche\Core\Bus\Tests\Fixtures\InvalidHandlerMethodNameResolver;
use Cubiche\Core\Bus\Tests\Units\TestCase;

/**
 * ChainResolver class.
 *
 * Generated by TestGenerator on 2016-04-07 at 15:40:41.
 */
class ChainResolverTests extends TestCase
{
    /**
     * Test Resolve method.
     */
    public function testResolve()
    {
        $this
            ->given($resolver1 = new InvalidHandlerMethodNameResolver())
            ->and($resolver2 = new MethodWithShortObjectNameAndSuffixResolver('Listener'))
            ->and($resolver3 = new MethodWithShortObjectNameResolver('Message'))
            ->and($resolver4 = new DefaultResolver())
            ->and($resolver = new ChainResolver([$resolver1, $resolver2, $resolver3, $resolver4]))
            ->when($result = $resolver->resolve(LoginUserMessage::class))
            ->then()
                ->string($result)
                    ->isEqualTo('loginUser')
        ;

        $this
            ->given($resolver = new ChainResolver([]))
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LogoutUserMessage('ivan@cubiche.com'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }
}
