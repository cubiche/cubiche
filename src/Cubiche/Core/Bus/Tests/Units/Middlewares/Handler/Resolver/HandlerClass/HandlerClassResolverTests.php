<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Core\Bus\Tests\Units\Middlewares\Handler\Resolver\HandlerClass;

use Cubiche\Core\Bus\Exception\NotFoundException;
use Cubiche\Core\Bus\Middlewares\Handler\Locator\InMemoryLocator;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerClass\HandlerClassResolver;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerMethodName\DefaultResolver as HandlerMethodNameDefaultResolver;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\HandlerMethodName\MethodWithShortObjectNameResolver;
use Cubiche\Core\Bus\Middlewares\Handler\Resolver\NameOfCommand\FromClassNameResolver;
use Cubiche\Core\Bus\Tests\Fixtures\Command\LoginUserCommand;
use Cubiche\Core\Bus\Tests\Fixtures\Command\LoginUserCommandHandler;
use Cubiche\Core\Bus\Tests\Fixtures\Command\LogoutUserCommand;
use Cubiche\Core\Bus\Tests\Units\TestCase;
use Cubiche\Core\Delegate\Delegate;

/**
 * HandlerClassResolver class.
 *
 * Generated by TestGenerator on 2016-04-07 at 15:40:41.
 */
class HandlerClassResolverTests extends TestCase
{
    /**
     * Test Resolve method.
     */
    public function testResolve()
    {
        $this
            ->given(
                $resolver = new HandlerClassResolver(
                    new FromClassNameResolver(),
                    new HandlerMethodNameDefaultResolver(),
                    new InMemoryLocator([])
                )
            )
            ->and($resolver->addHandler(LoginUserCommand::class, new LoginUserCommandHandler()))
            ->when($result = $resolver->resolve(new LoginUserCommand('ivan@cubiche.com', 'plainpassword')))
            ->then()
                ->object($result)
                    ->isInstanceOf(Delegate::class)
        ;

        $this
            ->given(
                $resolver = new HandlerClassResolver(
                    new FromClassNameResolver(),
                    new HandlerMethodNameDefaultResolver(),
                    new InMemoryLocator([])
                )
            )
            ->and($resolver->addHandler(LoginUserCommand::class, new LoginUserCommandHandler()))
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LogoutUserCommand('ivan@cubiche.com'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;

        $this
            ->given(
                $resolver = new HandlerClassResolver(
                    new FromClassNameResolver(),
                    new MethodWithShortObjectNameResolver('Command'),
                    new InMemoryLocator([LoginUserCommand::class => new LoginUserCommandHandler()])
                )
            )
            ->then()
                ->exception(function () use ($resolver) {
                    $resolver->resolve(new LoginUserCommand('ivan@cubiche.com', 'plainpassword'));
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }
}
