<?php

/**
 * This file is part of the Cubiche/Serializer component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Serializer\Tests\Units;

use Cubiche\Core\Serializer\DefaultSerializer;
use Cubiche\Core\Serializer\Exception\SerializationException;
use Cubiche\Core\Serializer\Serializer;
use Cubiche\Core\Serializer\Tests\Fixtures\Address;
use Cubiche\Core\Serializer\Tests\Fixtures\AddressId;
use Cubiche\Core\Serializer\Tests\Fixtures\City;
use Cubiche\Core\Serializer\Tests\Fixtures\User;
use Cubiche\Core\Serializer\Tests\Fixtures\UserId;
use Cubiche\Domain\Geolocation\Coordinate;

/**
 * DefaultSerializer class.
 *
 * Generated by TestGenerator on 2016-05-03 at 14:37:10.
 */
class DefaultSerializerTests extends TestCase
{
    /**
     * @return Serializer
     */
    protected function createSerializer()
    {
        return new DefaultSerializer();
    }

    /**
     * @return User
     */
    protected function createUser()
    {
        return new User(UserId::next(), 'User-'.\rand(1, 100), \rand(1, 100), $this->faker->email);
    }

    /**
     * @return Address
     */
    protected function createAddress()
    {
        return new Address(
            AddressId::next(),
            'Home',
            $this->faker->streetName,
            $this->faker->postcode,
            $this->faker->city,
            Coordinate::fromLatLng($this->faker->latitude, $this->faker->longitude)
        );
    }

    /**
     * Test serialize/deserialize object.
     */
    public function testSerialize()
    {
        $this
            ->given($serializer = $this->createSerializer())
            ->and($address = $this->createAddress())
            ->and($user = $this->createUser())
            ->then()
                ->boolean($serializer->supports(User::class))
                    ->isFalse()
                ->variable($data = $serializer->serialize($address))
                    ->isNotNull()
                ->boolean($address->equals($serializer->deserialize($data, Address::class)))
                    ->isTrue()
                ->exception(function () use ($serializer, $user) {
                    $serializer->serialize($user);
                })->isInstanceOf(SerializationException::class)
                ->exception(function () use ($serializer, $user) {
                    $serializer->deserialize(
                        array('class' => User::class, 'payload' => array('name' => 'foo')),
                        User::class
                    );
                })->isInstanceOf(SerializationException::class)
        ;
    }
}
