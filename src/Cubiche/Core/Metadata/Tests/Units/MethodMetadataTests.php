<?php

/**
 * This file is part of the Cubiche/Metadata component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Metadata\Tests\Units;

use Cubiche\Core\Metadata\MethodMetadata;
use Cubiche\Core\Metadata\Tests\Fixtures\User;
use Cubiche\Core\Metadata\Tests\Fixtures\UserId;

/**
 * MethodMetadataTests class.
 *
 * Generated by TestGenerator on 2017-05-16 at 13:17:21.
 */
class MethodMetadataTests extends TestCase
{
    /**
     * {@inheritdoc}
     */
    protected function createMethodMetadata($className, $methodName)
    {
        return new MethodMetadata($className, $methodName);
    }

    /**
     * Test ClassName method.
     */
    public function testClassName()
    {
        $this
            ->given($className = User::class)
            ->and($methodName = 'username')
            ->when($methodMetadata = $this->createMethodMetadata($className, $methodName))
            ->then()
                ->string($methodMetadata->className())
                    ->isEqualTo($className)
        ;
    }

    /**
     * Test MethodName method.
     */
    public function testMethodName()
    {
        $this
            ->given($className = User::class)
            ->and($methodName = 'username')
            ->when($methodMetadata = $this->createMethodMetadata($className, $methodName))
            ->then()
                ->string($methodMetadata->methodName())
                    ->isEqualTo($methodName)
        ;
    }

    /**
     * Test metadata methods.
     */
    public function testMetadata()
    {
        $this
            ->given($propertyMetadata = $this->createMethodMetadata(User::class, 'id'))
            ->when($propertyMetadata->addMetadata('async', true))
            ->and($propertyMetadata->addMetadata('methodName', 'getId'))
            ->then()
                ->array($propertyMetadata->metadata())
                    ->hasKey('async')
                    ->hasKey('methodName')
                ->boolean($propertyMetadata->getMetadata('async'))
                    ->isTrue()
                ->string($propertyMetadata->getMetadata('methodName'))
                    ->isEqualTo('getId')
        ;
    }

    /**
     * Test Reflection method.
     */
    public function testReflection()
    {
        $this
            ->given($className = User::class)
            ->and($methodName = 'username')
            ->when($methodMetadata = $this->createMethodMetadata($className, $methodName))
            ->then()
                ->object($methodMetadata->reflection())
                    ->isInstanceOf(\ReflectionMethod::class)
                ->string($methodMetadata->reflection()->class)
                    ->isEqualTo($className)
                ->string($methodMetadata->reflection()->name)
                    ->isEqualTo($methodName)
        ;
    }

    /**
     * Test invoke method.
     */
    public function testInvoke()
    {
        $this
            ->given($user = new User(UserId::next(), 'Ivan', 'ivannis', 36, 'ivannis.suarez@gmail.com'))
            ->when($methodMetadata = $this->createMethodMetadata(User::class, 'username'))
            ->then()
                ->string($methodMetadata->invoke($user)->toNative())
                    ->isEqualTo('ivannis')
        ;
    }

    /**
     * Test Serialize/Unserialize method.
     */
    public function testSerialize()
    {
        $this
            ->given($methodMetadata = $this->createMethodMetadata(User::class, 'username'))
            ->and($methodMetadata1 = $this->createMethodMetadata(User::class, 'email'))
            ->when($methodMetadata->unserialize($methodMetadata1->serialize()))
            ->then()
                ->string($methodMetadata->className())
                    ->isEqualTo(User::class)
                ->string($methodMetadata->methodName())
                    ->isEqualTo('email')
        ;
    }
}
