<?php

/**
 * This file is part of the Cubiche/Metadata component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Metadata\Tests\Units;

use Cubiche\Core\Metadata\PropertyMetadata;
use Cubiche\Core\Metadata\Tests\Fixtures\User;
use Cubiche\Core\Metadata\Tests\Fixtures\UserId;

/**
 * PropertyMetadataTests class.
 *
 * Generated by TestGenerator on 2017-05-16 at 13:17:21.
 */
class PropertyMetadataTests extends TestCase
{
    /**
     * {@inheritdoc}
     */
    protected function createPropertyMetadata($className, $propertyName)
    {
        return new PropertyMetadata($className, $propertyName);
    }

    /**
     * Test ClassName method.
     */
    public function testClassName()
    {
        $this
            ->given($className = User::class)
            ->and($propertyName = 'username')
            ->when($propertyMetadata = $this->createPropertyMetadata($className, $propertyName))
            ->then()
                ->string($propertyMetadata->className())
                    ->isEqualTo($className)
        ;
    }

    /**
     * Test PropertyName method.
     */
    public function testPropertyName()
    {
        $this
            ->given($className = User::class)
            ->and($propertyName = 'username')
            ->when($propertyMetadata = $this->createPropertyMetadata($className, $propertyName))
            ->then()
                ->string($propertyMetadata->propertyName())
                    ->isEqualTo($propertyName)
        ;
    }

    /**
     * Test metadata methods.
     */
    public function testMetadata()
    {
        $this
            ->given($propertyMetadata = $this->createPropertyMetadata(User::class, 'id'))
            ->when($propertyMetadata->addMetadata('identifier', true))
            ->and($propertyMetadata->addMetadata('fieldName', '_id'))
            ->then()
                ->array($propertyMetadata->metadata())
                    ->hasKey('identifier')
                    ->hasKey('fieldName')
                ->boolean($propertyMetadata->getMetadata('identifier'))
                    ->isTrue()
                ->string($propertyMetadata->getMetadata('fieldName'))
                    ->isEqualTo('_id')
        ;
    }

    /**
     * Test Reflection method.
     */
    public function testReflection()
    {
        $this
            ->given($className = User::class)
            ->and($propertyName = 'username')
            ->when($propertyMetadata = $this->createPropertyMetadata($className, $propertyName))
            ->then()
                ->object($propertyMetadata->reflection())
                    ->isInstanceOf(\ReflectionProperty::class)
                ->string($propertyMetadata->reflection()->class)
                    ->isEqualTo($className)
                ->string($propertyMetadata->reflection()->name)
                    ->isEqualTo($propertyName)
        ;
    }

    /**
     * Test GetValue method.
     */
    public function testGetValue()
    {
        $this
            ->given($user = new User(UserId::next(), 'Ivan', 'ivannis', 36, 'ivannis.suarez@gmail.com'))
            ->when($propertyMetadata = $this->createPropertyMetadata(User::class, 'username'))
            ->then()
                ->string($propertyMetadata->getValue($user)->toNative())
                    ->isEqualTo('ivannis')
        ;
    }

    /**
     * Test SetValue method.
     */
    public function testSetValue()
    {
        $this
            ->given($user = new User(UserId::next(), 'Ivan', 'ivannis', 36, 'ivannis.suarez@gmail.com'))
            ->when($propertyMetadata = $this->createPropertyMetadata(User::class, 'username'))
            ->then()
                ->string($propertyMetadata->getValue($user)->toNative())
                    ->isEqualTo('ivannis')
                ->and()
                ->when($propertyMetadata->setValue($user, 'ivan'))
                ->then()
                    ->string($user->username())
                        ->isEqualTo('ivan')
        ;
    }

    /**
     * Test Serialize/Unserialize method.
     */
    public function testSerialize()
    {
        $this
            ->given($propertyMetadata = $this->createPropertyMetadata(User::class, 'username'))
            ->and($propertyMetadata1 = $this->createPropertyMetadata(User::class, 'email'))
            ->when($propertyMetadata->unserialize($propertyMetadata1->serialize()))
            ->then()
                ->string($propertyMetadata->className())
                    ->isEqualTo(User::class)
                ->string($propertyMetadata->propertyName())
                    ->isEqualTo('email')
        ;
    }
}
