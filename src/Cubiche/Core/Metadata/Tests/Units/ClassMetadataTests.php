<?php

/**
 * This file is part of the Cubiche/Metadata component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Metadata\Tests\Units;

use Cubiche\Core\Metadata\ClassMetadata;
use Cubiche\Core\Metadata\MethodMetadata;
use Cubiche\Core\Metadata\PropertyMetadata;
use Cubiche\Core\Metadata\Tests\Fixtures\Address;
use Cubiche\Core\Metadata\Tests\Fixtures\User;

/**
 * ClassMetadataTests class.
 *
 * Generated by TestGenerator on 2017-05-16 at 13:17:21.
 */
class ClassMetadataTests extends TestCase
{
    /**
     * {@inheritdoc}
     */
    protected function createClassMetadata($className)
    {
        return new ClassMetadata($className);
    }

    /**
     * Test ClassName method.
     */
    public function testClassName()
    {
        $this
            ->given($className = User::class)
            ->when($classMetadata = $this->createClassMetadata($className))
            ->then()
                ->string($classMetadata->className())
                    ->isEqualTo($className)
        ;
    }

    /**
     * Test Reflection method.
     */
    public function testReflection()
    {
        $this
            ->given($className = User::class)
            ->when($classMetadata = $this->createClassMetadata($className))
            ->then()
                ->object($classMetadata->reflection())
                    ->isInstanceOf(\ReflectionClass::class)
                ->string($classMetadata->reflection()->name)
                    ->isEqualTo($className)
        ;
    }

    /**
     * Test methodMetadata methods.
     */
    public function testMethodMetadata()
    {
        $this
            ->given($className = User::class)
            ->and($methodMetadata = new MethodMetadata($className, 'username'))
            ->when($classMetadata = $this->createClassMetadata($className))
            ->then()
                ->array($classMetadata->methodsMetadata())
                    ->isEmpty()
                ->and()
                ->when($classMetadata->addMethodMetadata($methodMetadata))
                ->then()
                    ->array($classMetadata->methodsMetadata())
                        ->hasKey('username')
                    ->object($classMetadata->methodMetadata('username'))
                        ->isEqualTo($methodMetadata)
        ;
    }

    /**
     * Test propertyMetadata methods.
     */
    public function testPropertyMetadata()
    {
        $this
            ->given($className = User::class)
            ->and($propertyMetadata = new PropertyMetadata($className, 'username'))
            ->when($classMetadata = $this->createClassMetadata($className))
            ->then()
                ->array($classMetadata->propertiesMetadata())
                    ->isEmpty()
                ->and()
                ->when($classMetadata->addPropertyMetadata($propertyMetadata))
                ->then()
                    ->array($classMetadata->propertiesMetadata())
                        ->hasKey('username')
                    ->object($classMetadata->propertyMetadata('username'))
                        ->isEqualTo($propertyMetadata)
        ;
    }

    /**
     * Test metadata methods.
     */
    public function testMetadata()
    {
        $this
            ->given($className = User::class)
            ->and($classMetadata = $this->createClassMetadata($className))
            ->and($classMetadata->addMetadata('collection', 'some_collection_name'))
            ->and($classMetadata->addMetadata('embedded', false))
            ->then()
                ->array($classMetadata->metadata())
                    ->hasKey('collection')
                    ->hasKey('embedded')
                ->boolean($classMetadata->getMetadata('embedded'))
                    ->isFalse()
                ->string($classMetadata->getMetadata('collection'))
                    ->isEqualTo('some_collection_name')
        ;
    }

    /**
     * Test merge method.
     */
    public function testMerge()
    {
        $this
            ->given($classMetadata = $this->createClassMetadata(User::class))
            ->and($classMetadata->addPropertyMetadata(new PropertyMetadata(User::class, 'email')))
            ->and($classMetadata->addMethodMetadata(new MethodMetadata(User::class, 'username')))
            ->and($classMetadata1 = $this->createClassMetadata(User::class))
            ->and($classMetadata1->addPropertyMetadata(new PropertyMetadata(User::class, 'age')))
            ->and($classMetadata1->addMethodMetadata(new MethodMetadata(User::class, 'addresses')))
            ->and($classMetadata1->addMetadata('collection', 'some_collection_name'))
            ->then()
                ->array($classMetadata->propertiesMetadata())
                    ->hasSize(1)
                    ->notHasKey('age')
                ->array($classMetadata->methodsMetadata())
                    ->hasSize(1)
                    ->notHasKey('addresses')
                ->array($classMetadata->metadata())
                    ->notHasKey('collection')
                ->and()
                ->when($classMetadata->merge($classMetadata1))
                ->then()
                    ->array($classMetadata->propertiesMetadata())
                        ->hasSize(2)
                        ->hasKey('age')
                    ->array($classMetadata->methodsMetadata())
                        ->hasSize(2)
                        ->hasKey('addresses')
                    ->string($classMetadata->getMetadata('collection'))
                        ->isEqualTo('some_collection_name')
        ;
    }

    /**
     * Test Serialize/Unserialize method.
     */
    public function testSerialize()
    {
        $this
            ->given($classMetadata = $this->createClassMetadata(User::class))
            ->and($classMetadata->addMethodMetadata(new MethodMetadata(User::class, 'username')))
            ->and($classMetadata->addMethodMetadata(new MethodMetadata(User::class, 'email')))
            ->and($classMetadata1 = $this->createClassMetadata(Address::class))
            ->and($classMetadata1->addMethodMetadata(new MethodMetadata(Address::class, 'city')))
            ->when($classMetadata->unserialize($classMetadata1->serialize()))
            ->then()
                ->string($classMetadata->className())
                    ->isEqualTo(Address::class)
                ->array($classMetadata->methodsMetadata())
                    ->hasKey('city')
        ;
    }
}
