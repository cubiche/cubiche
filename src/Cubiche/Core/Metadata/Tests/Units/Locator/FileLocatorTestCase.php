<?php

/**
 * This file is part of the Cubiche/Metadata component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Metadata\Tests\Units\Locator;

use Cubiche\Core\Metadata\Locator\FileLocatorInterface;
use Cubiche\Core\Metadata\Tests\Fixtures\Address;
use Cubiche\Core\Metadata\Tests\Fixtures\User;
use Cubiche\Core\Metadata\Tests\Units\TestCase;
use mageekguy\atoum\adapter as Adapter;
use mageekguy\atoum\annotations\extractor as Extractor;
use mageekguy\atoum\asserter\generator as Generator;
use mageekguy\atoum\test\assertion\manager as Manager;
use mageekguy\atoum\tools\variable\analyzer as Analyzer;

/**
 * FileLocatorTestCase class.
 *
 * Generated by TestGenerator on 2017-05-16 at 13:17:21.
 */
abstract class FileLocatorTestCase extends TestCase
{
    /**
     * @var string
     */
    protected $mappingDirectory;

    /**
     * @param Adapter   $adapter
     * @param Extractor $annotationExtractor
     * @param Generator $asserterGenerator
     * @param Manager   $assertionManager
     * @param \Closure  $reflectionClassFactory
     * @param \Closure  $phpExtensionFactory
     * @param Analyzer  $analyzer
     */
    public function __construct(
        Adapter $adapter = null,
        Extractor $annotationExtractor = null,
        Generator $asserterGenerator = null,
        Manager $assertionManager = null,
        \Closure $reflectionClassFactory = null,
        \Closure $phpExtensionFactory = null,
        Analyzer $analyzer = null
    ) {
        parent::__construct(
            $adapter,
            $annotationExtractor,
            $asserterGenerator,
            $assertionManager,
            $reflectionClassFactory,
            $phpExtensionFactory,
            $analyzer
        );

        $this->mappingDirectory = __DIR__.'/../../Fixtures/mapping';
    }

    /**
     * @return FileLocatorInterface
     */
    abstract protected function createLocator();

    /**
     * Test findMappingFile method.
     */
    public function testfindMappingFile()
    {
        $this
            ->given($locator = $this->createLocator())
            ->then()
                ->string($locator->findMappingFile(User::class, '.xml'))
                    ->isEqualTo($this->mappingDirectory.'/Fixtures.User.xml')
        ;
    }

    /**
     * Test getAllClassNames method.
     */
    public function testGetAllClassNames()
    {
        $this
            ->given($locator = $this->createLocator())
            ->then()
                ->array($locator->getAllClassNames('.xml'))
                    ->contains(Address::class)
                    ->contains(User::class)
        ;
    }
}
