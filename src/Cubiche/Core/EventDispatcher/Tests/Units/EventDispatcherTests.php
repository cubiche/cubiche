<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cubiche\Core\EventDispatcher\Tests\Units;

use Cubiche\Core\EventDispatcher\EventDispatcher;
use Cubiche\Core\EventDispatcher\Event;
use Cubiche\Core\EventDispatcher\EventInterface;
use Cubiche\Core\EventDispatcher\PostDispatchEvent;
use Cubiche\Core\EventDispatcher\PreDispatchEvent;
use Cubiche\Core\EventDispatcher\Tests\Fixtures\InvalidEvent;
use Cubiche\Core\EventDispatcher\Tests\Fixtures\LoginUserEvent;
use Cubiche\Core\EventDispatcher\Tests\Fixtures\LoginUserEventListener;
use Cubiche\Core\EventDispatcher\Tests\Fixtures\UserEventSubscriber;

/**
 * EventDispatcher class.
 *
 * Generated by TestGenerator on 2016-04-11 at 15:18:25.
 */
class EventDispatcherTests extends TestCase
{
    /**
     * @return EventDispatcher
     */
    public function createEventDispatcher()
    {
        return new EventDispatcher();
    }

    /**
     * Test Dispatch method.
     */
    public function testDispatch()
    {
        // dispatch event name
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->when($event = $dispatcher->dispatch('foo.event'))
            ->then()
                ->object($event)
                    ->isInstanceOf(Event::class)
        ;

        // dispatch event named
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->when($event = $dispatcher->dispatch(Event::named('foo.event')))
            ->then()
                ->object($event)
                    ->isInstanceOf(Event::class)
        ;

        // dispatch event class
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->when($event = $dispatcher->dispatch(new LoginUserEvent('ivan@cubiche.com')))
            ->then()
                ->object($event)
                    ->isInstanceOf(EventInterface::class)
        ;

        // dispatch invalid event
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->then()
                ->exception(function () use ($dispatcher) {
                    $dispatcher->dispatch(new InvalidEvent());
                })
                ->isInstanceOf(\InvalidArgumentException::class)
        ;

        // dispatch with one callable listener
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($counter = 0)
            ->and($dispatcher->addListener('foo.event', function (Event $event) use (&$counter) {
                ++$counter;
            }))
            ->when($dispatcher->dispatch('foo.event'))
            ->then()
                ->integer($counter)
                    ->isEqualTo(1)
        ;

        // dispatch with many callable listener
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($counter = 0)
            ->and($dispatcher->addListener('foo.event', function (Event $event) use (&$counter) {
                ++$counter;
            }))
            ->and($dispatcher->addListener('foo.event', function (Event $event) use (&$counter) {
                ++$counter;
            }))
            ->when($dispatcher->dispatch('foo.event'))
            ->then()
                ->integer($counter)
                    ->isEqualTo(2)
        ;

        // dispatch with many callable listener but stopped the event propagation
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($counter = 0)
            ->and($dispatcher->addListener('foo.event', function (Event $event) use (&$counter) {
                ++$counter;
                $event->stopPropagation();
            }))
            ->and($dispatcher->addListener('foo.event', function (Event $event) use (&$counter) {
                ++$counter;
            }))
            ->when($dispatcher->dispatch('foo.event'))
            ->then()
                ->integer($counter)
                    ->isEqualTo(1)
        ;

        // dispatch with many callable listener and priority
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($counter = 3)
            ->and($dispatcher->addListener('foo.event', function (Event $event) use (&$counter) {
                $counter = $counter * 5;
            }, 50))
            ->and($dispatcher->addListener('foo.event', function (Event $event) use (&$counter) {
                $counter = $counter + 2;
            }, 100))
            ->when($dispatcher->dispatch('foo.event'))
            ->then()
                ->integer($counter)
                    ->isEqualTo(25)
        ;

        // dispatch with many listener class or callable
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($event = new LoginUserEvent('ivan@cubiche.com'))
            ->and($dispatcher->addListener($event->eventName(), array(new LoginUserEventListener(), 'onLogin')))
            ->and($dispatcher->addListener($event->eventName(), function (LoginUserEvent $event) {
                $this
                    ->string($event->email())
                        ->isEqualTo('info@cubiche.org')
                ;

                $event->setEmail('fake@email.com');
            }))
            ->when($dispatcher->dispatch($event))
            ->then()
                ->string($event->email())
                    ->isEqualTo('fake@email.com')
        ;
    }

    /**
     * Test listeners method.
     */
    public function testListeners()
    {
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($predispatch = 0)
            ->and($postdispatch = 0)
            ->and(
                $dispatcher->addListener(
                    PreDispatchEvent::class,
                    function (PreDispatchEvent $event) use (&$predispatch) {
                        ++$predispatch;
                    }
                )
            )
            ->and(
                $dispatcher->addListener(
                    PostDispatchEvent::class,
                    function (PostDispatchEvent $event) use (&$postdispatch) {
                        ++$postdispatch;
                    }
                )
            )
            ->and($event = new LoginUserEvent('ivan@cubiche.com'))
            ->and($dispatcher->addListener($event->eventName(), array(new LoginUserEventListener(), 'onLogin')))
            ->and($dispatcher->addListener('event.foo', function (Event $event) {

            }))
            ->and($dispatcher->addListener('event.bar', function (Event $event) {

            }))
            ->when($listeners = $dispatcher->listeners())
                ->then()
                    ->array($listeners->toArray())
                        ->hasKey($event->eventName())
                        ->hasKey('event.foo')
                        ->hasKey('event.bar')
                    ->array($listeners->toArray())
                        ->hasSize(5)
            ->and()
            ->when($dispatcher->dispatch('event.foo'))
            ->and($dispatcher->dispatch('event.bar'))
            ->then()
                ->integer($predispatch)
                    ->isEqualTo($postdispatch)
                    ->isEqualTo(2)
        ;
    }

    /**
     * Test listenerPriority method.
     */
    public function testListenerPriority()
    {
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($listener1 = array(new LoginUserEventListener(), 'onLogin'))
            ->and($listener2 = function (Event $event) {
                return $event->eventName();
            })
            ->and($listener3 = function (Event $event) {

            })
            ->and($dispatcher->addListener('event.foo', $listener1, 100))
            ->and($dispatcher->addListener('event.foo', $listener2, 50))
            ->and($dispatcher->addListener('event.bar', $listener3))
            ->then()
                ->variable($dispatcher->listenerPriority('event.unknow', $listener1))
                    ->isNull()
                ->variable($dispatcher->listenerPriority('event.foo', $listener3))
                    ->isNull()
                ->integer($dispatcher->listenerPriority('event.foo', $listener1))
                    ->isEqualTo(100)
                ->integer($dispatcher->listenerPriority('event.foo', $listener2))
                    ->isEqualTo(50)
        ;
    }

    /**
     * Test HasListeners method.
     */
    public function testHasListeners()
    {
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($listener1 = array(new LoginUserEventListener(), 'onLogin'))
            ->and($listener2 = function (Event $event) {
                return $event->eventName();
            })
            ->and($listener3 = function (Event $event) {

            })
            ->and($dispatcher->addListener('event.foo', $listener1, 100))
            ->and($dispatcher->addListener('event.foo', $listener2, 50))
            ->and($dispatcher->addListener('event.bar', $listener3))
            ->then()
                ->boolean($dispatcher->hasEventListeners('event.unknow'))
                    ->isFalse()
                ->boolean($dispatcher->hasEventListeners('event.foo'))
                    ->isTrue()
                ->boolean($dispatcher->hasListeners())
                    ->isTrue()
        ;
    }

    /**
     * Test RemoveListener method.
     */
    public function testRemoveListener()
    {
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($listener1 = array(new LoginUserEventListener(), 'onLogin'))
            ->and($listener2 = function (Event $event) {
                return $event->eventName();
            })
            ->and($listener3 = function (Event $event) {

            })
            ->and($dispatcher->addListener('event.foo', $listener1, 100))
            ->and($dispatcher->addListener('event.foo', $listener2, 50))
            ->and($dispatcher->addListener('event.bar', $listener3))
            ->then()
                ->boolean($dispatcher->hasListeners('event.foo'))
                    ->isTrue()
                ->and()
                ->when($dispatcher->removeListener('event.foo', $listener1))
                ->then()
                    ->boolean($dispatcher->hasListeners('event.foo'))
                        ->isTrue()
                ->and()
                ->when($dispatcher->removeListener('event.unknow', $listener2))
                ->when($dispatcher->removeListener('event.foo', $listener2))
                ->then()
                    ->boolean($dispatcher->hasEventListeners('event.foo'))
                        ->isFalse()
        ;
    }

    /**
     * Test AddSubscriber method.
     */
    public function testAddSubscriber()
    {
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($dispatcher->addSubscriber(new UserEventSubscriber()))
            ->then()
                ->boolean($dispatcher->hasListeners())
                    ->isTrue()
                ->boolean($dispatcher->hasListeners(UserEventSubscriber::FOO_EVENT))
                    ->isTrue()
                ->boolean($dispatcher->hasListeners(UserEventSubscriber::BAR_EVENT))
                    ->isTrue()
                ->boolean($dispatcher->hasListeners(UserEventSubscriber::USER_LOGIN))
                    ->isTrue()
        ;
    }

    /**
     * Test RemoveSubscriber method.
     */
    public function testRemoveSubscriber()
    {
        $this
            ->given($dispatcher = $this->createEventDispatcher())
            ->and($subscriber = new UserEventSubscriber())
            ->and($dispatcher->addSubscriber($subscriber))
            ->then()
                ->boolean($dispatcher->hasListeners(UserEventSubscriber::FOO_EVENT))
                    ->isTrue()
                ->boolean($dispatcher->hasListeners(UserEventSubscriber::BAR_EVENT))
                    ->isTrue()
                ->boolean($dispatcher->hasListeners(UserEventSubscriber::USER_LOGIN))
                    ->isTrue()
                ->and()
                ->when($dispatcher->removeSubscriber($subscriber))
                ->then()
                    ->boolean($dispatcher->hasListeners(UserEventSubscriber::FOO_EVENT))
                        ->isFalse()
                    ->boolean($dispatcher->hasListeners(UserEventSubscriber::BAR_EVENT))
                        ->isFalse()
                    ->boolean($dispatcher->hasListeners(UserEventSubscriber::USER_LOGIN))
                        ->isFalse()
        ;
    }
}
